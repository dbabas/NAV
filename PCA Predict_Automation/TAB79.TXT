OBJECT Table 79 Company Information
{
  OBJECT-PROPERTIES
  {
    Date=30/01/18;
    Time=10:09:18;
    Modified=Yes;
    Version List=NAVW15.00,NAVGB4.00.01,OP12513;
  }
  PROPERTIES
  {
    CaptionML=[ENU=Company Information;
               ENG=Company Information];
  }
  FIELDS
  {
    { 1   ;   ;Primary Key         ;Code10        ;CaptionML=[ENU=Primary Key;
                                                              ENG=Primary Key] }
    { 2   ;   ;Name                ;Text50        ;CaptionML=[ENU=Name;
                                                              ENG=Name] }
    { 3   ;   ;Name 2              ;Text50        ;CaptionML=[ENU=Name 2;
                                                              ENG=Name 2] }
    { 4   ;   ;Address             ;Text50        ;CaptionML=[ENU=Address;
                                                              ENG=Address] }
    { 5   ;   ;Address 2           ;Text50        ;CaptionML=[ENU=Address 2;
                                                              ENG=Address 2] }
    { 6   ;   ;City                ;Text30        ;OnValidate=BEGIN
                                                                PostCode.ValidateCity(City,"Post Code");
                                                              END;

                                                   OnLookup=BEGIN
                                                              PostCode.LookUpCity(City,"Post Code",TRUE);
                                                            END;

                                                   CaptionML=[ENU=City;
                                                              ENG=City] }
    { 7   ;   ;Phone No.           ;Text20        ;CaptionML=[ENU=Phone No.;
                                                              ENG=Phone No.] }
    { 8   ;   ;Phone No. 2         ;Text20        ;CaptionML=[ENU=Phone No. 2;
                                                              ENG=Phone No. 2] }
    { 9   ;   ;Telex No.           ;Text20        ;CaptionML=[ENU=Telex No.;
                                                              ENG=Telex No.] }
    { 10  ;   ;Fax No.             ;Text20        ;CaptionML=[ENU=Fax No.;
                                                              ENG=Fax No.] }
    { 11  ;   ;Giro No.            ;Text20        ;CaptionML=[ENU=Giro No.;
                                                              ENG=Giro No.] }
    { 12  ;   ;Bank Name           ;Text50        ;CaptionML=[ENU=Bank Name;
                                                              ENG=Bank Name] }
    { 13  ;   ;Bank Branch No.     ;Text20        ;CaptionML=[ENU=Bank Branch No.;
                                                              ENG=Bank Sort Code] }
    { 14  ;   ;Bank Account No.    ;Text30        ;CaptionML=[ENU=Bank Account No.;
                                                              ENG=Bank Account No.] }
    { 15  ;   ;Payment Routing No. ;Text20        ;CaptionML=[ENU=Payment Routing No.;
                                                              ENG=Payment Routing No.] }
    { 17  ;   ;Customs Permit No.  ;Text10        ;CaptionML=[ENU=Customs Permit No.;
                                                              ENG=Customs Permit No.] }
    { 18  ;   ;Customs Permit Date ;Date          ;CaptionML=[ENU=Customs Permit Date;
                                                              ENG=Customs Permit Date] }
    { 19  ;   ;VAT Registration No.;Text20        ;OnValidate=VAR
                                                                VATRegNoFormat@1000 : Record 381;
                                                              BEGIN
                                                                VATRegNoFormat.Test("VAT Registration No.","Country/Region Code",'',DATABASE::"Company Information");
                                                              END;

                                                   CaptionML=[ENU=VAT Registration No.;
                                                              ENG=VAT Registration No.] }
    { 20  ;   ;Registration No.    ;Text20        ;CaptionML=[ENU=Registration No.;
                                                              ENG=Registration No.] }
    { 21  ;   ;Telex Answer Back   ;Text20        ;CaptionML=[ENU=Telex Answer Back;
                                                              ENG=Telex Answer Back] }
    { 22  ;   ;Ship-to Name        ;Text50        ;CaptionML=[ENU=Ship-to Name;
                                                              ENG=Ship-to Name] }
    { 23  ;   ;Ship-to Name 2      ;Text50        ;CaptionML=[ENU=Ship-to Name 2;
                                                              ENG=Ship-to Name 2] }
    { 24  ;   ;Ship-to Address     ;Text50        ;CaptionML=[ENU=Ship-to Address;
                                                              ENG=Ship-to Address] }
    { 25  ;   ;Ship-to Address 2   ;Text50        ;CaptionML=[ENU=Ship-to Address 2;
                                                              ENG=Ship-to Address 2] }
    { 26  ;   ;Ship-to City        ;Text30        ;OnValidate=BEGIN
                                                                PostCode.ValidateCity("Ship-to City","Ship-to Post Code");
                                                              END;

                                                   OnLookup=BEGIN
                                                              PostCode.LookUpCity("Ship-to City","Ship-to Post Code",TRUE);
                                                            END;

                                                   CaptionML=[ENU=Ship-to City;
                                                              ENG=Ship-to City] }
    { 27  ;   ;Ship-to Contact     ;Text50        ;CaptionML=[ENU=Ship-to Contact;
                                                              ENG=Ship-to Contact] }
    { 28  ;   ;Location Code       ;Code10        ;TableRelation=Location WHERE (Use As In-Transit=CONST(No));
                                                   CaptionML=[ENU=Location Code;
                                                              ENG=Location Code] }
    { 29  ;   ;Picture             ;BLOB          ;CaptionML=[ENU=Picture;
                                                              ENG=Picture];
                                                   SubType=Bitmap }
    { 30  ;   ;Post Code           ;Code20        ;TableRelation="Post Code";
                                                   OnValidate=BEGIN
                                                                PostCode.ValidatePostCode(City,"Post Code");
                                                              END;

                                                   OnLookup=BEGIN
                                                              PostCode.LookUpPostCode(City,"Post Code",TRUE);
                                                            END;

                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=[ENU=Post Code;
                                                              ENG=Post Code] }
    { 31  ;   ;County              ;Text30        ;CaptionML=[ENU=County;
                                                              ENG=County] }
    { 32  ;   ;Ship-to Post Code   ;Code20        ;TableRelation="Post Code";
                                                   OnValidate=BEGIN
                                                                PostCode.ValidatePostCode("Ship-to City","Ship-to Post Code");
                                                              END;

                                                   OnLookup=BEGIN
                                                              PostCode.LookUpPostCode("Ship-to City","Ship-to Post Code",TRUE);
                                                            END;

                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=[ENU=Ship-to Post Code;
                                                              ENG=Ship-to Post Code] }
    { 33  ;   ;Ship-to County      ;Text30        ;CaptionML=[ENU=Ship-to County;
                                                              ENG=Ship-to County] }
    { 34  ;   ;E-Mail              ;Text80        ;CaptionML=[ENU=E-Mail;
                                                              ENG=E-Mail] }
    { 35  ;   ;Home Page           ;Text80        ;CaptionML=[ENU=Home Page;
                                                              ENG=Home Page] }
    { 36  ;   ;Country/Region Code ;Code10        ;TableRelation=Country/Region;
                                                   CaptionML=[ENU=Country/Region Code;
                                                              ENG=Country/Region Code] }
    { 37  ;   ;Ship-to Country/Region Code;Code10 ;TableRelation=Country/Region;
                                                   CaptionML=[ENU=Ship-to Country/Region Code;
                                                              ENG=Ship-to Country/Region Code] }
    { 38  ;   ;IBAN                ;Code50        ;OnValidate=BEGIN
                                                                CheckIBAN(IBAN);
                                                              END;

                                                   CaptionML=[ENU=IBAN;
                                                              ENG=IBAN] }
    { 39  ;   ;SWIFT Code          ;Code20        ;CaptionML=[ENU=SWIFT Code;
                                                              ENG=SWIFT Code] }
    { 40  ;   ;Industrial Classification;Text30   ;CaptionML=[ENU=Industrial Classification;
                                                              ENG=Industrial Classification] }
    { 41  ;   ;IC Partner Code     ;Code20        ;CaptionML=[ENU=IC Partner Code;
                                                              ENG=IC Partner Code] }
    { 42  ;   ;IC Inbox Type       ;Option        ;OnValidate=BEGIN
                                                                IF "IC Inbox Type" = "IC Inbox Type"::Database THEN
                                                                  "IC Inbox Details" := '';
                                                              END;

                                                   CaptionML=[ENU=IC Inbox Type;
                                                              ENG=IC Inbox Type];
                                                   OptionCaptionML=[ENU=File Location,Database;
                                                                    ENG=File Location,Database];
                                                   OptionString=File Location,Database }
    { 43  ;   ;IC Inbox Details    ;Text250       ;OnLookup=VAR
                                                              CmDlgMgt@1001 : Codeunit 412;
                                                              i@1000 : Integer;
                                                            BEGIN
                                                              TESTFIELD("IC Partner Code");
                                                              CASE "IC Inbox Type" OF
                                                                "IC Inbox Type"::"File Location":
                                                                  BEGIN
                                                                    IF "IC Inbox Details" = '' THEN
                                                                      "IC Inbox Details" := CmDlgMgt.OpenFile(Text001,STRSUBSTNO('%1.xml',"IC Partner Code"),4,'*.xml',1)
                                                                    ELSE
                                                                      "IC Inbox Details" :=
                                                                        CmDlgMgt.OpenFile(Text001,"IC Inbox Details" + STRSUBSTNO('\%1.xml',"IC Partner Code"),4,'*.xml',1);
                                                                    IF STRLEN("IC Inbox Details") > 4 THEN BEGIN
                                                                        i := STRLEN("IC Inbox Details") - 4;
                                                                        WHILE (i > 1) AND ("IC Inbox Details"[i] <> '\') DO
                                                                          i := i - 1;
                                                                        IF i > 1 THEN
                                                                          "IC Inbox Details" := COPYSTR("IC Inbox Details",1,i - 1);
                                                                      END;
                                                                  END;
                                                              END;
                                                            END;

                                                   CaptionML=[ENU=IC Inbox Details;
                                                              ENG=IC Inbox Details] }
    { 5700;   ;Responsibility Center;Code10       ;TableRelation="Responsibility Center".Code;
                                                   ValidateTableRelation=Yes;
                                                   CaptionML=[ENU=Responsibility Center;
                                                              ENG=Responsibility Centre] }
    { 5791;   ;Check-Avail. Period Calc.;DateFormula;
                                                   CaptionML=[ENU=Check-Avail. Period Calc.;
                                                              ENG=Check-Avail. Period Calc.] }
    { 5792;   ;Check-Avail. Time Bucket;Option    ;CaptionML=[ENU=Check-Avail. Time Bucket;
                                                              ENG=Check-Avail. Time Bucket];
                                                   OptionCaptionML=[ENU=Day,Week,Month,Quarter,Year;
                                                                    ENG=Day,Week,Month,Quarter,Year];
                                                   OptionString=Day,Week,Month,Quarter,Year }
    { 7600;   ;Base Calendar Code  ;Code10        ;TableRelation="Base Calendar";
                                                   CaptionML=[ENU=Base Calendar Code;
                                                              ENG=Base Calendar Code] }
    { 7601;   ;Cal. Convergence Time Frame;DateFormula;
                                                   InitValue=1Y;
                                                   CaptionML=[ENU=Cal. Convergence Time Frame;
                                                              ENG=Cal. Convergence Time Frame] }
    { 10500;  ;Registered Name     ;Text50        ;CaptionML=[ENU=Registered Name;
                                                              ENG=Registered Name] }
    { 10501;  ;Registered Name 2   ;Text50        ;CaptionML=[ENU=Registered Name 2;
                                                              ENG=Registered Name 2] }
    { 10502;  ;Registered Address  ;Text50        ;CaptionML=[ENU=Registered Address;
                                                              ENG=Registered Address] }
    { 10503;  ;Registered Address 2;Text50        ;CaptionML=[ENU=Registered Address 2;
                                                              ENG=Registered Address 2] }
    { 10504;  ;Registered City     ;Text30        ;CaptionML=[ENU=Registered City;
                                                              ENG=Registered City] }
    { 10505;  ;Registered County   ;Text30        ;CaptionML=[ENU=Registered County;
                                                              ENG=Registered County] }
    { 10506;  ;Registered Post Code;Code20        ;TableRelation="Post Code";
                                                   OnValidate=BEGIN
                                                                IF PostCode.GET("Registered Post Code") THEN
                                                                  "Registered City" := PostCode.City;
                                                              END;

                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=[ENU=Registered Post Code;
                                                              ENG=Registered Post Code] }
    { 10507;  ;Branch Number       ;Text3         ;OnValidate=BEGIN
                                                                IF STRLEN("Branch Number") < MAXSTRLEN("Branch Number") THEN
                                                                  FIELDERROR("Branch Number",STRSUBSTNO(Text10500,MAXSTRLEN("Branch Number")));
                                                              END;

                                                   CaptionML=[ENU=Branch Number;
                                                              ENG=Branch Number];
                                                   CharAllowed=09 }
    { 10508;  ;Contact Name        ;Text35        ;CaptionML=[ENU=Contact Name;
                                                              ENG=Contact Name] }
    { 50001;  ;Repeat Order Email Sender Name;Text30;
                                                   Description=AK 230708 }
    { 50002;  ;Repeat Order Email Sender Addr;Text100;
                                                   CaptionML=ENG=Repeat Order Email Sender Address;
                                                   Description=AK 230708 }
    { 50003;  ;Color Code          ;Option        ;OptionString=[ ,Blue,Yellow] }
    { 50004;  ;Biocare Limited     ;Boolean        }
    { 50005;  ;Nutrigold Limited   ;Boolean        }
    { 50006;  ;Totally Nourish Limited;Boolean     }
    { 50007;  ;Education Phone No. ;Text80         }
    { 50008;  ;Education Fax No.   ;Text80         }
    { 50009;  ;Education Email     ;Text80         }
    { 50010;  ;Purchase Department Email;Text80    }
    { 50011;  ;Purchase Department Fax;Text80      }
    { 50012;  ;Purchase Department Phone No.;Text80 }
    { 50050;  ;Natural Wellbeing limited;Boolean  ;Description=TNP1.00 }
    { 50051;  ;AhHa Publications Ltd;Boolean      ;Description=TB 161014 }
    { 50060;  ;PCA Predict Key     ;Text80        ;Description=OP12513 }
    { 50070;  ;PCA Account Code    ;Text30        ;Description=OP12513 }
    { 50080;  ;PCA User Password   ;Text30        ;Description=OP12513 }
  }
  KEYS
  {
    {    ;Primary Key                             ;Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      PostCode@1000 : Record 225;
      Text000@1001 : TextConst 'ENU=The number you entered is not a valid IBAN.;ENG=The number you entered is not a valid IBAN.';
      Text001@1002 : TextConst 'ENU=File Location for IC files;ENG=File Location for IC files';
      Text10500@1040000 : TextConst 'ENU=must be a %1 digit numeric number;ENG=must be a %1 digit numeric number';

    PROCEDURE CheckIBAN@1(IBANCode@1000 : Code[100]);
    VAR
      Modulus97@1001 : Integer;
      I@1002 : Integer;
    BEGIN
      IF IBANCode = '' THEN
        EXIT;
      IBANCode := DELCHR(IBANCode);
      Modulus97 := 97;
      IF (STRLEN(IBANCode) <= 5) OR (STRLEN(IBANCode) > 34) THEN
        IBANError;
      ConvertIBAN(IBANCode);
      WHILE STRLEN(IBANCode) > 6 DO
        IBANCode := CalcModulus(COPYSTR(IBANCode,1,6),Modulus97) + COPYSTR(IBANCode,7);
      EVALUATE(I,IBANCode);
      IF (I MOD Modulus97) <> 1 THEN
        IBANError;
    END;

    LOCAL PROCEDURE ConvertIBAN@4(VAR IBANCode@1000 : Code[100]);
    VAR
      I@1002 : Integer;
    BEGIN
      IBANCode := COPYSTR(IBANCode,5) + COPYSTR(IBANCode,1,4);
      I := 0;
      WHILE I < STRLEN(IBANCode) DO BEGIN
        I := I + 1;
        IF ConvertLetter(IBANCode,COPYSTR(IBANCode,I,1),I) THEN
          I := 0;
      END;
    END;

    LOCAL PROCEDURE CalcModulus@3(Number@1000 : Code[10];Modulus97@1001 : Integer) : Code[10];
    VAR
      I@1002 : Integer;
    BEGIN
      EVALUATE(I,Number);
      I := I MOD Modulus97;
      IF I = 0 THEN
        EXIT('');
      EXIT(FORMAT(I));
    END;

    LOCAL PROCEDURE ConvertLetter@5(VAR IBANCode@1000 : Code[100];Letter@1001 : Code[1];LetterPlace@1002 : Integer) : Boolean;
    VAR
      Letter2@1003 : Code[2];
    BEGIN
      IF (Letter >= 'A') AND (Letter <= 'Z') THEN BEGIN
        CASE Letter OF
          'A': Letter2 := '10';
          'B': Letter2 := '11';
          'C': Letter2 := '12';
          'D': Letter2 := '13';
          'E': Letter2 := '14';
          'F': Letter2 := '15';
          'G': Letter2 := '16';
          'H': Letter2 := '17';
          'I': Letter2 := '18';
          'J': Letter2 := '19';
          'K': Letter2 := '20';
          'L': Letter2 := '21';
          'M': Letter2 := '22';
          'N': Letter2 := '23';
          'O': Letter2 := '24';
          'P': Letter2 := '25';
          'Q': Letter2 := '26';
          'R': Letter2 := '27';
          'S': Letter2 := '28';
          'T': Letter2 := '29';
          'U': Letter2 := '30';
          'V': Letter2 := '31';
          'W': Letter2 := '32';
          'X': Letter2 := '33';
          'Y': Letter2 := '34';
          'Z': Letter2 := '35';
        END;
        IF LetterPlace = 1 THEN
          IBANCode := Letter2 + COPYSTR(IBANCode,2)
        ELSE BEGIN
          IF LetterPlace = STRLEN(IBANCode) THEN
            IBANCode := COPYSTR(IBANCode,1,LetterPlace - 1) + Letter2
          ELSE
            IBANCode :=
              COPYSTR(IBANCode,1,LetterPlace - 1) + Letter2 + COPYSTR(IBANCode,LetterPlace + 1);
        END;
        EXIT(TRUE);
      END;
      IF (Letter >= '0') AND (Letter <= '9') THEN
        EXIT(FALSE);

      IBANError;
    END;

    LOCAL PROCEDURE IBANError@12();
    BEGIN
      ERROR(Text000);
    END;

    PROCEDURE DisplayMap@7();
    VAR
      MapPoint@1001 : Record 800;
      MapMgt@1000 : Codeunit 802;
    BEGIN
      IF MapPoint.FIND('-') THEN
        MapMgt.MakeSelection(DATABASE::"Company Information",GETPOSITION);
    END;

    BEGIN
    {
      //DOC OP12513 DD 30/01/2018 - Added new fields "PCA Predict Key", "PCA User Name" and "PCA User Password"
    }
    END.
  }
}

