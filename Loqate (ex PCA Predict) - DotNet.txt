OBJECT Table 9 Country/Region
{
  OBJECT-PROPERTIES
  {
    Date=22/11/18;
    Time=13:08:10;
    Modified=Yes;
    Version List=NAVW17.00,SDL1.000,OP14491;
  }
  PROPERTIES
  {
    OnDelete=VAR
               VATRegNoFormat@1000 : Record 381;
             BEGIN
               VATRegNoFormat.SETFILTER("Country/Region Code",Code);
               VATRegNoFormat.DELETEALL;
             END;

    CaptionML=[ENU=Country/Region;
               ENG=Country/Region];
    LookupPageID=Page10;
  }
  FIELDS
  {
    { 1   ;   ;Code                ;Code10        ;CaptionML=[ENU=Code;
                                                              ENG=Code];
                                                   NotBlank=Yes }
    { 2   ;   ;Name                ;Text50        ;CaptionML=[ENU=Name;
                                                              ENG=Name] }
    { 6   ;   ;EU Country/Region Code;Code10      ;CaptionML=[ENU=EU Country/Region Code;
                                                              ENG=EU Country/Region Code] }
    { 7   ;   ;Intrastat Code      ;Code10        ;CaptionML=[ENU=Intrastat Code;
                                                              ENG=Intrastat Code] }
    { 8   ;   ;Address Format      ;Option        ;InitValue=City+Post Code;
                                                   CaptionML=[ENU=Address Format;
                                                              ENG=Address Format];
                                                   OptionCaptionML=[ENU=Post Code+City,City+Post Code,City+County+Post Code,Blank Line+Post Code+City;
                                                                    ENG=Post Code+City,City+Post Code,City+County+Post Code,Blank Line+Post Code+City];
                                                   OptionString=Post Code+City,City+Post Code,City+County+Post Code,Blank Line+Post Code+City }
    { 9   ;   ;Contact Address Format;Option      ;InitValue=After Company Name;
                                                   CaptionML=[ENU=Contact Address Format;
                                                              ENG=Contact Address Format];
                                                   OptionCaptionML=[ENU=First,After Company Name,Last;
                                                                    ENG=First,After Company Name,Last];
                                                   OptionString=First,After Company Name,Last }
    { 50000;  ;Loqate Country      ;Boolean       ;CaptionML=[ENU=Loqate Country;
                                                              ENG=Loqate Country];
                                                   Description=OP14491 }
    { 60700;  ;Territory Code      ;Code10        ;TableRelation=Territory }
  }
  KEYS
  {
    {    ;Code                                    ;Clustered=Yes }
    {    ;EU Country/Region Code                   }
    {    ;Intrastat Code                           }
    {    ;Name                                     }
  }
  FIELDGROUPS
  {
  }
  CODE
  {

    BEGIN
    {
      //DOC OP14491 DB 22/11/2018 - Added "Loqate Country" field
    }
    END.
  }
}

OBJECT Table 98 General Ledger Setup
{
  OBJECT-PROPERTIES
  {
    Date=16/11/18;
    Time=15:52:28;
    Modified=Yes;
    Version List=NAVW17.10,NAVGB7.10,QAS,SDL1.000,OP14491;
  }
  PROPERTIES
  {
    CaptionML=[ENU=General Ledger Setup;
               ENG=General Ledger Setup];
  }
  FIELDS
  {
    { 1   ;   ;Primary Key         ;Code10        ;CaptionML=[ENU=Primary Key;
                                                              ENG=Primary Key] }
    { 2   ;   ;Allow Posting From  ;Date          ;CaptionML=[ENU=Allow Posting From;
                                                              ENG=Allow Posting From] }
    { 3   ;   ;Allow Posting To    ;Date          ;CaptionML=[ENU=Allow Posting To;
                                                              ENG=Allow Posting To] }
    { 4   ;   ;Register Time       ;Boolean       ;CaptionML=[ENU=Register Time;
                                                              ENG=Register Time] }
    { 28  ;   ;Pmt. Disc. Excl. VAT;Boolean       ;OnValidate=BEGIN
                                                                IF "Pmt. Disc. Excl. VAT" THEN
                                                                  TESTFIELD("Adjust for Payment Disc.",FALSE)
                                                                ELSE
                                                                  TESTFIELD("VAT Tolerance %",0);
                                                              END;

                                                   CaptionML=[ENU=Pmt. Disc. Excl. VAT;
                                                              ENG=Pmt. Disc. Excl. VAT] }
    { 41  ;   ;Date Filter         ;Date          ;FieldClass=FlowFilter;
                                                   CaptionML=[ENU=Date Filter;
                                                              ENG=Date Filter] }
    { 42  ;   ;Global Dimension 1 Filter;Code20   ;FieldClass=FlowFilter;
                                                   TableRelation="Dimension Value".Code WHERE (Dimension Code=FIELD(Global Dimension 1 Code));
                                                   CaptionML=[ENU=Global Dimension 1 Filter;
                                                              ENG=Global Dimension 1 Filter];
                                                   CaptionClass='1,3,1' }
    { 43  ;   ;Global Dimension 2 Filter;Code20   ;FieldClass=FlowFilter;
                                                   TableRelation="Dimension Value".Code WHERE (Dimension Code=FIELD(Global Dimension 2 Code));
                                                   CaptionML=[ENU=Global Dimension 2 Filter;
                                                              ENG=Global Dimension 2 Filter];
                                                   CaptionClass='1,3,2' }
    { 44  ;   ;Cust. Balances Due  ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Detailed Cust. Ledg. Entry"."Amount (LCY)" WHERE (Initial Entry Global Dim. 1=FIELD(Global Dimension 1 Filter),
                                                                                                                      Initial Entry Global Dim. 2=FIELD(Global Dimension 2 Filter),
                                                                                                                      Initial Entry Due Date=FIELD(Date Filter)));
                                                   CaptionML=[ENU=Cust. Balances Due;
                                                              ENG=Cust. Balances Due];
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 45  ;   ;Vendor Balances Due ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=-Sum("Detailed Vendor Ledg. Entry"."Amount (LCY)" WHERE (Initial Entry Global Dim. 1=FIELD(Global Dimension 1 Filter),
                                                                                                                        Initial Entry Global Dim. 2=FIELD(Global Dimension 2 Filter),
                                                                                                                        Initial Entry Due Date=FIELD(Date Filter)));
                                                   CaptionML=[ENU=Vendor Balances Due;
                                                              ENG=Vendor Balances Due];
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 48  ;   ;Unrealized VAT      ;Boolean       ;OnValidate=BEGIN
                                                                IF NOT "Unrealized VAT" THEN BEGIN
                                                                  VATPostingSetup.SETFILTER(
                                                                    "Unrealized VAT Type",'>=%1',VATPostingSetup."Unrealized VAT Type"::Percentage);
                                                                  IF VATPostingSetup.FINDFIRST THEN
                                                                    ERROR(
                                                                      Text000,VATPostingSetup.TABLECAPTION,
                                                                      VATPostingSetup."VAT Bus. Posting Group",VATPostingSetup."VAT Prod. Posting Group",
                                                                      VATPostingSetup.FIELDCAPTION("Unrealized VAT Type"),VATPostingSetup."Unrealized VAT Type");
                                                                  TaxJurisdiction.SETFILTER(
                                                                    "Unrealized VAT Type",'>=%1',TaxJurisdiction."Unrealized VAT Type"::Percentage);
                                                                  IF TaxJurisdiction.FINDFIRST THEN
                                                                    ERROR(
                                                                      Text001,TaxJurisdiction.TABLECAPTION,
                                                                      TaxJurisdiction.Code,TaxJurisdiction.FIELDCAPTION("Unrealized VAT Type"),
                                                                      TaxJurisdiction."Unrealized VAT Type");
                                                                END;
                                                                IF "Unrealized VAT" THEN
                                                                  "Prepayment Unrealized VAT" := TRUE
                                                                ELSE
                                                                  "Prepayment Unrealized VAT" := FALSE;
                                                              END;

                                                   CaptionML=[ENU=Unrealized VAT;
                                                              ENG=Unrealised VAT] }
    { 49  ;   ;Adjust for Payment Disc.;Boolean   ;OnValidate=BEGIN
                                                                IF "Adjust for Payment Disc." THEN BEGIN
                                                                  TESTFIELD("Pmt. Disc. Excl. VAT",FALSE);
                                                                  TESTFIELD("VAT Tolerance %",0);
                                                                END ELSE BEGIN
                                                                  VATPostingSetup.SETRANGE("Adjust for Payment Discount",TRUE);
                                                                  IF VATPostingSetup.FINDFIRST THEN
                                                                    ERROR(
                                                                      Text002,VATPostingSetup.TABLECAPTION,
                                                                      VATPostingSetup."VAT Bus. Posting Group",VATPostingSetup."VAT Prod. Posting Group",
                                                                      VATPostingSetup.FIELDCAPTION("Adjust for Payment Discount"));
                                                                  TaxJurisdiction.SETRANGE("Adjust for Payment Discount",TRUE);
                                                                  IF TaxJurisdiction.FINDFIRST THEN
                                                                    ERROR(
                                                                      Text003,TaxJurisdiction.TABLECAPTION,
                                                                      TaxJurisdiction.Code,TaxJurisdiction.FIELDCAPTION("Adjust for Payment Discount"));
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Adjust for Payment Disc.;
                                                              ENG=Adjust for Payment Disc.] }
    { 56  ;   ;Mark Cr. Memos as Corrections;Boolean;
                                                   CaptionML=[ENU=Mark Cr. Memos as Corrections;
                                                              ENG=Mark Cr. Memos as Corrections] }
    { 57  ;   ;Local Address Format;Option        ;CaptionML=[ENU=Local Address Format;
                                                              ENG=Local Address Format];
                                                   OptionCaptionML=[ENU=Post Code+City,City+Post Code,City+County+Post Code,Blank Line+Post Code+City;
                                                                    ENG=Post Code+City,City+Post Code,City+County+Post Code,Blank Line+Post Code+City];
                                                   OptionString=Post Code+City,City+Post Code,City+County+Post Code,Blank Line+Post Code+City }
    { 58  ;   ;Inv. Rounding Precision (LCY);Decimal;
                                                   OnValidate=BEGIN
                                                                IF "Amount Rounding Precision" <> 0 THEN
                                                                  IF "Inv. Rounding Precision (LCY)" <> ROUND("Inv. Rounding Precision (LCY)","Amount Rounding Precision") THEN
                                                                    ERROR(
                                                                      Text004,
                                                                      FIELDCAPTION("Inv. Rounding Precision (LCY)"),"Amount Rounding Precision");
                                                              END;

                                                   CaptionML=[ENU=Inv. Rounding Precision (LCY);
                                                              ENG=Inv. Rounding Precision (LCY)];
                                                   AutoFormatType=1 }
    { 59  ;   ;Inv. Rounding Type (LCY);Option    ;CaptionML=[ENU=Inv. Rounding Type (LCY);
                                                              ENG=Inv. Rounding Type (LCY)];
                                                   OptionCaptionML=[ENU=Nearest,Up,Down;
                                                                    ENG=Nearest,Up,Down];
                                                   OptionString=Nearest,Up,Down }
    { 60  ;   ;Local Cont. Addr. Format;Option    ;InitValue=After Company Name;
                                                   CaptionML=[ENU=Local Cont. Addr. Format;
                                                              ENG=Local Cont. Addr. Format];
                                                   OptionCaptionML=[ENU=First,After Company Name,Last;
                                                                    ENG=First,After Company Name,Last];
                                                   OptionString=First,After Company Name,Last }
    { 63  ;   ;Bank Account Nos.   ;Code10        ;TableRelation="No. Series";
                                                   CaptionML=[ENU=Bank Account Nos.;
                                                              ENG=Bank Account Nos.] }
    { 65  ;   ;Summarize G/L Entries;Boolean      ;CaptionML=[ENU=Summarize G/L Entries;
                                                              ENG=Summarise G/L Entries] }
    { 66  ;   ;Amount Decimal Places;Text5        ;InitValue=2:2;
                                                   OnValidate=BEGIN
                                                                CheckDecimalPlacesFormat("Amount Decimal Places");
                                                              END;

                                                   CaptionML=[ENU=Amount Decimal Places;
                                                              ENG=Amount Decimal Places] }
    { 67  ;   ;Unit-Amount Decimal Places;Text5   ;InitValue=2:5;
                                                   OnValidate=BEGIN
                                                                CheckDecimalPlacesFormat("Unit-Amount Decimal Places");
                                                              END;

                                                   CaptionML=[ENU=Unit-Amount Decimal Places;
                                                              ENG=Unit-Amount Decimal Places] }
    { 68  ;   ;Additional Reporting Currency;Code10;
                                                   TableRelation=Currency;
                                                   OnValidate=BEGIN
                                                                IF ("Additional Reporting Currency" <> xRec."Additional Reporting Currency") AND
                                                                   ("Additional Reporting Currency" <> '')
                                                                THEN BEGIN
                                                                  AdjAddReportingCurr.SetAddCurr("Additional Reporting Currency");
                                                                  AdjAddReportingCurr.RUNMODAL;
                                                                  IF NOT AdjAddReportingCurr.IsExecuted THEN
                                                                    "Additional Reporting Currency" := xRec."Additional Reporting Currency";
                                                                END;
                                                                IF ("Additional Reporting Currency" <> xRec."Additional Reporting Currency") AND
                                                                   AdjAddReportingCurr.IsExecuted
                                                                THEN
                                                                  DeleteIntrastatJnl;
                                                                IF ("Additional Reporting Currency" <> xRec."Additional Reporting Currency") AND
                                                                   ("Additional Reporting Currency" <> '') AND
                                                                   AdjAddReportingCurr.IsExecuted
                                                                THEN
                                                                  DeleteAnalysisView;
                                                              END;

                                                   CaptionML=[ENU=Additional Reporting Currency;
                                                              ENG=Additional Reporting Currency] }
    { 69  ;   ;VAT Tolerance %     ;Decimal       ;OnValidate=BEGIN
                                                                IF "VAT Tolerance %" <> 0 THEN BEGIN
                                                                  TESTFIELD("Adjust for Payment Disc.",FALSE);
                                                                  TESTFIELD("Pmt. Disc. Excl. VAT",TRUE);
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=VAT Tolerance %;
                                                              ENG=VAT Tolerance %];
                                                   DecimalPlaces=0:5;
                                                   MinValue=0;
                                                   MaxValue=100 }
    { 70  ;   ;EMU Currency        ;Boolean       ;CaptionML=[ENU=EMU Currency;
                                                              ENG=EMU Currency] }
    { 71  ;   ;LCY Code            ;Code10        ;CaptionML=[ENU=LCY Code;
                                                              ENG=LCY Code] }
    { 72  ;   ;VAT Exchange Rate Adjustment;Option;CaptionML=[ENU=VAT Exchange Rate Adjustment;
                                                              ENG=VAT Exchange Rate Adjustment];
                                                   OptionCaptionML=[ENU=No Adjustment,Adjust Amount,Adjust Additional-Currency Amount;
                                                                    ENG=No Adjustment,Adjust Amount,Adjust Additional-Currency Amount];
                                                   OptionString=No Adjustment,Adjust Amount,Adjust Additional-Currency Amount }
    { 73  ;   ;Amount Rounding Precision;Decimal  ;InitValue=0.01;
                                                   OnValidate=BEGIN
                                                                IF "Amount Rounding Precision" <> 0 THEN
                                                                  "Inv. Rounding Precision (LCY)" := ROUND("Inv. Rounding Precision (LCY)","Amount Rounding Precision");
                                                                RoundingErrorCheck(FIELDCAPTION("Amount Rounding Precision"));
                                                                IF HideDialog THEN
                                                                  MESSAGE(Text021);
                                                              END;

                                                   CaptionML=[ENU=Amount Rounding Precision;
                                                              ENG=Amount Rounding Precision];
                                                   DecimalPlaces=0:5 }
    { 74  ;   ;Unit-Amount Rounding Precision;Decimal;
                                                   InitValue=0.00001;
                                                   OnValidate=BEGIN
                                                                IF HideDialog THEN
                                                                  MESSAGE(Text022);
                                                              END;

                                                   CaptionML=[ENU=Unit-Amount Rounding Precision;
                                                              ENG=Unit-Amount Rounding Precision];
                                                   DecimalPlaces=0:9 }
    { 75  ;   ;Appln. Rounding Precision;Decimal  ;CaptionML=[ENU=Appln. Rounding Precision;
                                                              ENG=Appln. Rounding Precision];
                                                   MinValue=0;
                                                   AutoFormatType=1 }
    { 79  ;   ;Global Dimension 1 Code;Code20     ;TableRelation=Dimension;
                                                   OnValidate=BEGIN
                                                                "Shortcut Dimension 1 Code" := "Global Dimension 1 Code";
                                                              END;

                                                   CaptionML=[ENU=Global Dimension 1 Code;
                                                              ENG=Global Dimension 1 Code];
                                                   Editable=No }
    { 80  ;   ;Global Dimension 2 Code;Code20     ;TableRelation=Dimension;
                                                   OnValidate=BEGIN
                                                                "Shortcut Dimension 2 Code" := "Global Dimension 2 Code";
                                                              END;

                                                   CaptionML=[ENU=Global Dimension 2 Code;
                                                              ENG=Global Dimension 2 Code];
                                                   Editable=No }
    { 81  ;   ;Shortcut Dimension 1 Code;Code20   ;TableRelation=Dimension;
                                                   CaptionML=[ENU=Shortcut Dimension 1 Code;
                                                              ENG=Shortcut Dimension 1 Code];
                                                   Editable=No }
    { 82  ;   ;Shortcut Dimension 2 Code;Code20   ;TableRelation=Dimension;
                                                   CaptionML=[ENU=Shortcut Dimension 2 Code;
                                                              ENG=Shortcut Dimension 2 Code];
                                                   Editable=No }
    { 83  ;   ;Shortcut Dimension 3 Code;Code20   ;TableRelation=Dimension;
                                                   OnValidate=BEGIN
                                                                IF Dim.CheckIfDimUsed("Shortcut Dimension 3 Code",3,'','',0) THEN
                                                                  ERROR(Text023,Dim.GetCheckDimErr);
                                                                MODIFY;
                                                              END;

                                                   CaptionML=[ENU=Shortcut Dimension 3 Code;
                                                              ENG=Shortcut Dimension 3 Code] }
    { 84  ;   ;Shortcut Dimension 4 Code;Code20   ;TableRelation=Dimension;
                                                   OnValidate=BEGIN
                                                                IF Dim.CheckIfDimUsed("Shortcut Dimension 4 Code",4,'','',0) THEN
                                                                  ERROR(Text023,Dim.GetCheckDimErr);
                                                                MODIFY;
                                                              END;

                                                   CaptionML=[ENU=Shortcut Dimension 4 Code;
                                                              ENG=Shortcut Dimension 4 Code] }
    { 85  ;   ;Shortcut Dimension 5 Code;Code20   ;TableRelation=Dimension;
                                                   OnValidate=BEGIN
                                                                IF Dim.CheckIfDimUsed("Shortcut Dimension 5 Code",5,'','',0) THEN
                                                                  ERROR(Text023,Dim.GetCheckDimErr);
                                                                MODIFY;
                                                              END;

                                                   CaptionML=[ENU=Shortcut Dimension 5 Code;
                                                              ENG=Shortcut Dimension 5 Code] }
    { 86  ;   ;Shortcut Dimension 6 Code;Code20   ;TableRelation=Dimension;
                                                   OnValidate=BEGIN
                                                                IF Dim.CheckIfDimUsed("Shortcut Dimension 6 Code",6,'','',0) THEN
                                                                  ERROR(Text023,Dim.GetCheckDimErr);
                                                                MODIFY;
                                                              END;

                                                   CaptionML=[ENU=Shortcut Dimension 6 Code;
                                                              ENG=Shortcut Dimension 6 Code] }
    { 87  ;   ;Shortcut Dimension 7 Code;Code20   ;TableRelation=Dimension;
                                                   OnValidate=BEGIN
                                                                IF Dim.CheckIfDimUsed("Shortcut Dimension 7 Code",7,'','',0) THEN
                                                                  ERROR(Text023,Dim.GetCheckDimErr);
                                                                MODIFY;
                                                              END;

                                                   CaptionML=[ENU=Shortcut Dimension 7 Code;
                                                              ENG=Shortcut Dimension 7 Code] }
    { 88  ;   ;Shortcut Dimension 8 Code;Code20   ;TableRelation=Dimension;
                                                   OnValidate=BEGIN
                                                                IF Dim.CheckIfDimUsed("Shortcut Dimension 8 Code",8,'','',0) THEN
                                                                  ERROR(Text023,Dim.GetCheckDimErr);
                                                                MODIFY;
                                                              END;

                                                   CaptionML=[ENU=Shortcut Dimension 8 Code;
                                                              ENG=Shortcut Dimension 8 Code] }
    { 89  ;   ;Max. VAT Difference Allowed;Decimal;OnValidate=BEGIN
                                                                IF "Max. VAT Difference Allowed" <> ROUND("Max. VAT Difference Allowed") THEN
                                                                  ERROR(
                                                                    Text004,
                                                                    FIELDCAPTION("Max. VAT Difference Allowed"),"Amount Rounding Precision");

                                                                "Max. VAT Difference Allowed" := ABS("Max. VAT Difference Allowed");
                                                              END;

                                                   CaptionML=[ENU=Max. VAT Difference Allowed;
                                                              ENG=Max. VAT Difference Allowed];
                                                   AutoFormatType=1 }
    { 90  ;   ;VAT Rounding Type   ;Option        ;CaptionML=[ENU=VAT Rounding Type;
                                                              ENG=VAT Rounding Type];
                                                   OptionCaptionML=[ENU=Nearest,Up,Down;
                                                                    ENG=Nearest,Up,Down];
                                                   OptionString=Nearest,Up,Down }
    { 92  ;   ;Pmt. Disc. Tolerance Posting;Option;CaptionML=[ENU=Pmt. Disc. Tolerance Posting;
                                                              ENG=Pmt. Disc. Tolerance Posting];
                                                   OptionCaptionML=[ENU=Payment Tolerance Accounts,Payment Discount Accounts;
                                                                    ENG=Payment Tolerance Accounts,Payment Discount Accounts];
                                                   OptionString=Payment Tolerance Accounts,Payment Discount Accounts }
    { 93  ;   ;Payment Discount Grace Period;DateFormula;
                                                   CaptionML=[ENU=Payment Discount Grace Period;
                                                              ENG=Payment Discount Grace Period] }
    { 94  ;   ;Payment Tolerance % ;Decimal       ;CaptionML=[ENU=Payment Tolerance %;
                                                              ENG=Payment Tolerance %];
                                                   DecimalPlaces=0:5;
                                                   MinValue=0;
                                                   MaxValue=100;
                                                   Editable=No }
    { 95  ;   ;Max. Payment Tolerance Amount;Decimal;
                                                   CaptionML=[ENU=Max. Payment Tolerance Amount;
                                                              ENG=Max. Payment Tolerance Amount];
                                                   MinValue=0;
                                                   Editable=No }
    { 96  ;   ;Adapt Main Menu to Permissions;Boolean;
                                                   InitValue=Yes;
                                                   CaptionML=[ENU=Adapt Main Menu to Permissions;
                                                              ENG=Adapt Main Menu to Permissions] }
    { 97  ;   ;Allow G/L Acc. Deletion Before;Date;CaptionML=[ENU=Allow G/L Acc. Deletion Before;
                                                              ENG=Allow G/L Acc. Deletion Before] }
    { 98  ;   ;Check G/L Account Usage;Boolean    ;CaptionML=[ENU=Check G/L Account Usage;
                                                              ENG=Check G/L Account Usage] }
    { 99  ;   ;Payment Tolerance Posting;Option   ;CaptionML=[ENU=Payment Tolerance Posting;
                                                              ENG=Payment Tolerance Posting];
                                                   OptionCaptionML=[ENU=Payment Tolerance Accounts,Payment Discount Accounts;
                                                                    ENG=Payment Tolerance Accounts,Payment Discount Accounts];
                                                   OptionString=Payment Tolerance Accounts,Payment Discount Accounts }
    { 100 ;   ;Pmt. Disc. Tolerance Warning;Boolean;
                                                   CaptionML=[ENU=Pmt. Disc. Tolerance Warning;
                                                              ENG=Pmt. Disc. Tolerance Warning] }
    { 101 ;   ;Payment Tolerance Warning;Boolean  ;CaptionML=[ENU=Payment Tolerance Warning;
                                                              ENG=Payment Tolerance Warning] }
    { 102 ;   ;Last IC Transaction No.;Integer    ;CaptionML=[ENU=Last IC Transaction No.;
                                                              ENG=Last IC Transaction No.] }
    { 103 ;   ;Bill-to/Sell-to VAT Calc.;Option   ;CaptionML=[ENU=Bill-to/Sell-to VAT Calc.;
                                                              ENG=Bill-to/Sell-to VAT Calc.];
                                                   OptionCaptionML=[ENU=Bill-to/Pay-to No.,Sell-to/Buy-from No.;
                                                                    ENG=Bill-to/Pay-to No.,Sell-to/Buy-from No.];
                                                   OptionString=Bill-to/Pay-to No.,Sell-to/Buy-from No. }
    { 150 ;   ;Print VAT specification in LCY;Boolean;
                                                   CaptionML=[ENU=Print VAT specification in LCY;
                                                              ENG=Print VAT specification in LCY] }
    { 151 ;   ;Prepayment Unrealized VAT;Boolean  ;OnValidate=BEGIN
                                                                IF "Unrealized VAT" AND xRec."Prepayment Unrealized VAT" THEN
                                                                  ERROR(Text024,FIELDCAPTION("Prepayment Unrealized VAT"),FIELDCAPTION("Unrealized VAT"));

                                                                IF NOT "Prepayment Unrealized VAT" THEN BEGIN
                                                                  VATPostingSetup.SETFILTER(
                                                                    "Unrealized VAT Type",'>=%1',VATPostingSetup."Unrealized VAT Type"::Percentage);
                                                                  IF VATPostingSetup.FINDFIRST THEN
                                                                    ERROR(
                                                                      Text000,VATPostingSetup.TABLECAPTION,
                                                                      VATPostingSetup."VAT Bus. Posting Group",VATPostingSetup."VAT Prod. Posting Group",
                                                                      VATPostingSetup.FIELDCAPTION("Unrealized VAT Type"),VATPostingSetup."Unrealized VAT Type");
                                                                  TaxJurisdiction.SETFILTER(
                                                                    "Unrealized VAT Type",'>=%1',TaxJurisdiction."Unrealized VAT Type"::Percentage);
                                                                  IF TaxJurisdiction.FINDFIRST THEN
                                                                    ERROR(
                                                                      Text001,TaxJurisdiction.TABLECAPTION,
                                                                      TaxJurisdiction.Code,TaxJurisdiction.FIELDCAPTION("Unrealized VAT Type"),
                                                                      TaxJurisdiction."Unrealized VAT Type");
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Prepayment Unrealized VAT;
                                                              ENG=Prepayment Unrealised VAT] }
    { 152 ;   ;Use Legacy G/L Entry Locking;Boolean;
                                                   OnValidate=VAR
                                                                InventorySetup@1000 : Record 313;
                                                              BEGIN
                                                                IF NOT "Use Legacy G/L Entry Locking" THEN BEGIN
                                                                  IF InventorySetup.GET THEN
                                                                    IF InventorySetup."Automatic Cost Posting" THEN
                                                                      ERROR(Text025,
                                                                        FIELDCAPTION("Use Legacy G/L Entry Locking"),
                                                                        "Use Legacy G/L Entry Locking",
                                                                        InventorySetup.FIELDCAPTION("Automatic Cost Posting"),
                                                                        InventorySetup.TABLECAPTION,
                                                                        InventorySetup."Automatic Cost Posting");
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Use Legacy G/L Entry Locking;
                                                              ENG=Use Legacy G/L Entry Locking] }
    { 160 ;   ;Payroll Trans. Import Format;Code20;TableRelation="Posting Exch. Def" WHERE (Type=CONST(Payroll Import));
                                                   CaptionML=[ENU=Payroll Trans. Import Format;
                                                              ENG=Payroll Trans. Import Format] }
    { 10500;  ;Threshold applies   ;Boolean       ;CaptionML=[ENU=Threshold applies;
                                                              ENG=Threshold applies] }
    { 10501;  ;Threshold Amount    ;Decimal       ;CaptionML=[ENU=Threshold Amount;
                                                              ENG=Threshold Amount];
                                                   MinValue=0 }
    { 50000;  ;Loqate Enabled      ;Boolean       ;OnValidate=BEGIN
                                                                //DOC OP14491 DRM 15/11/2018 -
                                                                IF "Loqate Enabled" THEN
                                                                  TESTFIELD("QAS Enabled",FALSE);
                                                                //DOC OP14491 DRM 15/11/2018 +
                                                              END;

                                                   CaptionML=[ENU=Loqate Enabled;
                                                              ENG=Loqate Enabled];
                                                   Description=OP14491 }
    { 50001;  ;Loqate Service Key  ;Text250       ;CaptionML=[ENU=Loqate Service Key;
                                                              ENG=Loqate Service Key];
                                                   Description=OP14491 }
    { 60700;  ;QAS Enabled         ;Boolean       ;OnValidate=BEGIN
                                                                //DOC OP14491 DRM 15/11/2018 -
                                                                IF "QAS Enabled" THEN
                                                                  TESTFIELD("Loqate Enabled",FALSE);
                                                                //DOC OP14491 DRM 15/11/2018 +
                                                              END;
                                                               }
    { 60701;  ;Web Service URL     ;Text250        }
    { 60702;  ;Suggest Names       ;Boolean        }
  }
  KEYS
  {
    {    ;Primary Key                             ;Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      Text000@1000 : TextConst 'ENU=%1 %2 %3 have %4 to %5.;ENG=%1 %2 %3 have %4 to %5.';
      Text001@1001 : TextConst 'ENU=%1 %2 have %3 to %4.;ENG=%1 %2 have %3 to %4.';
      Text002@1002 : TextConst 'ENU=%1 %2 %3 use %4.;ENG=%1 %2 %3 use %4.';
      Text003@1003 : TextConst 'ENU=%1 %2 use %3.;ENG=%1 %2 use %3.';
      Text004@1004 : TextConst 'ENU=%1 must be rounded to the nearest %2.;ENG=%1 must be rounded to the nearest %2.';
      Text016@1013 : TextConst 'ENU="Enter one number or two numbers separated by a colon. ";ENG="Enter one number or two numbers separated by a colon. "';
      Text017@1014 : TextConst 'ENU=The online Help for this field describes how you can fill in the field.;ENG=The online Help for this field describes how you can fill in the field.';
      Text018@1015 : TextConst 'ENU=You cannot change the contents of the %1 field because there are posted ledger entries.;ENG=You cannot change the contents of the %1 field because there are posted ledger entries.';
      Text021@1018 : TextConst 'ENU=You must close the program and start again in order to activate the amount-rounding feature.;ENG=You must close the program and start again in order to activate the amount-rounding feature.';
      Text022@1019 : TextConst 'ENU=You must close the program and start again in order to activate the unit-amount rounding feature.;ENG=You must close the program and start again in order to activate the unit-amount rounding feature.';
      Text023@1020 : TextConst 'ENU=%1\You cannot use the same dimension twice in the same setup.;ENG=%1\You cannot use the same dimension twice in the same setup.';
      Dim@1021 : Record 348;
      GLEntry@1022 : Record 17;
      ItemLedgerEntry@1023 : Record 32;
      JobLedgEntry@1024 : Record 169;
      ResLedgEntry@1025 : Record 203;
      FALedgerEntry@1026 : Record 5601;
      MaintenanceLedgerEntry@1027 : Record 5625;
      InsCoverageLedgerEntry@1028 : Record 5629;
      VATPostingSetup@1029 : Record 325;
      TaxJurisdiction@1030 : Record 320;
      AdjAddReportingCurr@1031 : Report 86;
      AnalysisView@1032 : Record 363;
      AnalysisViewEntry@1033 : Record 365;
      AnalysisViewBudgetEntry@1034 : Record 366;
      ErrorMessage@1036 : Boolean;
      Text024@1009 : TextConst 'ENU=You cannot change the contents of the %1 field because the %2 is activated.;ENG=You cannot change the contents of the %1 field because the %2 is activated.';
      Text025@1016 : TextConst 'ENU=The field %1 should not be set to %2 if field %3 in %4 table is set to %5 because deadlocks can occur.;ENG=The field %1 should not be set to %2 if field %3 in %4 table is set to %5 because deadlocks can occur.';

    PROCEDURE CheckDecimalPlacesFormat@1(VAR DecimalPlaces@1000 : Text[5]);
    VAR
      OK@1001 : Boolean;
      ColonPlace@1002 : Integer;
      DecimalPlacesPart1@1003 : Integer;
      DecimalPlacesPart2@1004 : Integer;
      Check@1005 : Text[5];
    BEGIN
      OK := TRUE;
      ColonPlace := STRPOS(DecimalPlaces,':');

      IF ColonPlace = 0 THEN BEGIN
        IF NOT EVALUATE(DecimalPlacesPart1,DecimalPlaces) THEN
          OK := FALSE;
        IF (DecimalPlacesPart1 < 0) OR (DecimalPlacesPart1 > 9) THEN
          OK := FALSE;
      END ELSE BEGIN
        Check := COPYSTR(DecimalPlaces,1,ColonPlace - 1);
        IF Check = '' THEN
          OK := FALSE;
        IF NOT EVALUATE(DecimalPlacesPart1,Check) THEN
          OK := FALSE;
        Check := COPYSTR(DecimalPlaces,ColonPlace + 1,STRLEN(DecimalPlaces));
        IF Check = '' THEN
          OK := FALSE;
        IF NOT EVALUATE(DecimalPlacesPart2,Check) THEN
          OK := FALSE;
        IF DecimalPlacesPart1 > DecimalPlacesPart2 THEN
          OK := FALSE;
        IF (DecimalPlacesPart1 < 0) OR (DecimalPlacesPart1 > 9) THEN
          OK := FALSE;
        IF (DecimalPlacesPart2 < 0) OR (DecimalPlacesPart2 > 9) THEN
          OK := FALSE;
      END;

      IF NOT OK THEN
        ERROR(
          Text016 +
          Text017);

      IF ColonPlace = 0 THEN
        DecimalPlaces := FORMAT(DecimalPlacesPart1)
      ELSE
        DecimalPlaces := STRSUBSTNO('%1:%2',DecimalPlacesPart1,DecimalPlacesPart2);
    END;

    PROCEDURE GetCurrencyCode@6(CurrencyCode@1000 : Code[10]) : Code[10];
    BEGIN
      CASE CurrencyCode OF
        '':
          EXIT("LCY Code");
        "LCY Code":
          EXIT('');
        ELSE
          EXIT(CurrencyCode);
      END;
    END;

    PROCEDURE RoundingErrorCheck@2(NameOfField@1000 : Text[100]);
    BEGIN
      ErrorMessage := FALSE;
      IF GLEntry.FINDFIRST THEN
        ErrorMessage := TRUE;
      IF ItemLedgerEntry.FINDFIRST THEN
        ErrorMessage := TRUE;
      IF JobLedgEntry.FINDFIRST THEN
        ErrorMessage := TRUE;
      IF ResLedgEntry.FINDFIRST THEN
        ErrorMessage := TRUE;
      IF FALedgerEntry.FINDFIRST THEN
        ErrorMessage := TRUE;
      IF MaintenanceLedgerEntry.FINDFIRST THEN
        ErrorMessage := TRUE;
      IF InsCoverageLedgerEntry.FINDFIRST THEN
        ErrorMessage := TRUE;
      IF ErrorMessage THEN
        ERROR(
          Text018,
          NameOfField);
    END;

    PROCEDURE DeleteIntrastatJnl@3();
    VAR
      IntrastatJnlBatch@1000 : Record 262;
      IntrastatJnlLine@1001 : Record 263;
    BEGIN
      IntrastatJnlBatch.SETRANGE(Reported,FALSE);
      IntrastatJnlBatch.SETRANGE("Amounts in Add. Currency",TRUE);
      IF IntrastatJnlBatch.FIND('-') THEN
        REPEAT
          IntrastatJnlLine.SETRANGE("Journal Template Name",IntrastatJnlBatch."Journal Template Name");
          IntrastatJnlLine.SETRANGE("Journal Batch Name",IntrastatJnlBatch.Name);
          IntrastatJnlLine.DELETEALL;
        UNTIL IntrastatJnlBatch.NEXT = 0;
    END;

    PROCEDURE DeleteAnalysisView@33();
    BEGIN
      IF AnalysisView.FIND('-') THEN
        REPEAT
          IF AnalysisView.Blocked = FALSE THEN BEGIN
            AnalysisViewEntry.SETRANGE("Analysis View Code",AnalysisView.Code);
            AnalysisViewEntry.DELETEALL;
            AnalysisViewBudgetEntry.SETRANGE("Analysis View Code",AnalysisView.Code);
            AnalysisViewBudgetEntry.DELETEALL;
            AnalysisView."Last Entry No." := 0;
            AnalysisView."Last Budget Entry No." := 0;
            AnalysisView."Last Date Updated" := 0D;
            AnalysisView.MODIFY;
          END ELSE BEGIN
            AnalysisView."Refresh When Unblocked" := TRUE;
            AnalysisView.MODIFY;
          END;
        UNTIL AnalysisView.NEXT = 0;
    END;

    PROCEDURE IsPostingAllowed@22(PostingDate@1000 : Date) : Boolean;
    BEGIN
      EXIT(PostingDate >= "Allow Posting From");
    END;

    PROCEDURE OptimGLEntLockForMultiuserEnv@4() : Boolean;
    VAR
      InventorySetup@1000 : Record 313;
    BEGIN
      IF "Use Legacy G/L Entry Locking" THEN
        EXIT(FALSE);

      IF InventorySetup.GET THEN
        IF InventorySetup."Automatic Cost Posting" THEN
          EXIT(FALSE);

      EXIT(TRUE);
    END;

    PROCEDURE FirstAllowedPostingDate@78() AllowedPostingDate : Date;
    VAR
      InvtPeriod@1000 : Record 5814;
    BEGIN
      AllowedPostingDate := "Allow Posting From";
      IF NOT InvtPeriod.IsValidDate(AllowedPostingDate) THEN
        AllowedPostingDate := CALCDATE('<+1D>',AllowedPostingDate);
    END;

    LOCAL PROCEDURE HideDialog@5() : Boolean;
    BEGIN
      EXIT((CurrFieldNo = 0) OR NOT GUIALLOWED);
    END;

    BEGIN
    {
      SDL1.000  A.Ireland QUK  QAS integration  20/03/2009
        Added new parameter fields for QAS integration.
      //DOC OP14491 DRM 15/11/2018 - Added Loqate Enabled field.
    }
    END.
  }
}

OBJECT Table 222 Ship-to Address
{
  OBJECT-PROPERTIES
  {
    Date=22/11/18;
    Time=11:02:00;
    Modified=Yes;
    Version List=NAVW17.10,QAS,SDL1.109,OP14491;
  }
  PROPERTIES
  {
    DataCaptionFields=Customer No.,Name,Code;
    OnInsert=BEGIN
               Cust.GET("Customer No.");
               //Cust.MODIFY(TRUE);
               Name := Cust.Name;


               // SDL1.109 - START
               "Special Instruction 1" := Cust."Special Instruction 1";
               "Special Instruction 2" := Cust."Special Instruction 2";
               "Residential Property" := Cust."Residential Property";
               "Email For Carrier Confirm" := Cust."Email For Carrier Confirm";
               "Phone For Carrier Confirm" := Cust."Phone For Carrier Confirm";
               "Collection On Delivery" := Cust."Collection On Delivery";
               // SDL1.109 - FINISH

               //"Created Date_Time" := CURRENTDATETIME;
             END;

    OnModify=BEGIN
               "Last Date Modified" := TODAY;
               //"Last Modified Date_Time":=CURRENTDATETIME;

               //Cust.GET("Customer No.");
               //Cust.MODIFY(TRUE);
             END;

    OnRename=BEGIN
               "Last Date Modified" := TODAY;
             END;

    CaptionML=[ENU=Ship-to Address;
               ENG=Ship-to Address];
    LookupPageID=Page301;
  }
  FIELDS
  {
    { 1   ;   ;Customer No.        ;Code20        ;TableRelation=Customer;
                                                   CaptionML=[ENU=Customer No.;
                                                              ENG=Customer No.];
                                                   NotBlank=Yes }
    { 2   ;   ;Code                ;Code10        ;CaptionML=[ENU=Code;
                                                              ENG=Code];
                                                   NotBlank=Yes }
    { 3   ;   ;Name                ;Text50        ;CaptionML=[ENU=Name;
                                                              ENG=Name] }
    { 4   ;   ;Name 2              ;Text50        ;CaptionML=[ENU=Name 2;
                                                              ENG=Name 2] }
    { 5   ;   ;Address             ;Text50        ;CaptionML=[ENU=Address;
                                                              ENG=Address] }
    { 6   ;   ;Address 2           ;Text50        ;CaptionML=[ENU=Address 2;
                                                              ENG=Address 2] }
    { 7   ;   ;City                ;Text30        ;TableRelation=IF (Country/Region Code=CONST()) "Post Code".City
                                                                 ELSE IF (Country/Region Code=FILTER(<>'')) "Post Code".City WHERE (Country/Region Code=FIELD(Country/Region Code));
                                                   OnValidate=BEGIN
                                                                PostCode.ValidateCity(City,"Post Code",County,"Country/Region Code",(CurrFieldNo <> 0) AND GUIALLOWED);
                                                              END;

                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=[ENU=City;
                                                              ENG=City] }
    { 8   ;   ;Contact             ;Text50        ;CaptionML=[ENU=Contact;
                                                              ENG=Contact] }
    { 9   ;   ;Phone No.           ;Text30        ;ExtendedDatatype=Phone No.;
                                                   CaptionML=[ENU=Phone No.;
                                                              ENG=Phone No.] }
    { 10  ;   ;Telex No.           ;Text30        ;CaptionML=[ENU=Telex No.;
                                                              ENG=Telex No.] }
    { 30  ;   ;Shipment Method Code;Code10        ;TableRelation="Shipment Method";
                                                   CaptionML=[ENU=Shipment Method Code;
                                                              ENG=Shipment Method Code] }
    { 31  ;   ;Shipping Agent Code ;Code10        ;TableRelation="Shipping Agent";
                                                   OnValidate=BEGIN
                                                                IF "Shipping Agent Code" <> xRec."Shipping Agent Code" THEN
                                                                  VALIDATE("Shipping Agent Service Code",'');
                                                              END;

                                                   CaptionML=[ENU=Shipping Agent Code;
                                                              ENG=Shipping Agent Code] }
    { 32  ;   ;Place of Export     ;Code20        ;CaptionML=[ENU=Place of Export;
                                                              ENG=Place of Export] }
    { 35  ;   ;Country/Region Code ;Code10        ;InitValue=GB;
                                                   TableRelation=Country/Region;
                                                   OnValidate=VAR
                                                                Country@1040000 : Record 9;
                                                              BEGIN
                                                                Country.GET("Country/Region Code");
                                                                IF ("Territory Code" = '') AND (Country."Territory Code" <> '') THEN  //SDL1.036
                                                                  VALIDATE("Territory Code",Country."Territory Code");
                                                              END;

                                                   CaptionML=[ENU=Country/Region Code;
                                                              ENG=Country/Region Code] }
    { 54  ;   ;Last Date Modified  ;Date          ;CaptionML=[ENU=Last Date Modified;
                                                              ENG=Last Date Modified];
                                                   Editable=No }
    { 83  ;   ;Location Code       ;Code10        ;TableRelation=Location WHERE (Use As In-Transit=CONST(No));
                                                   CaptionML=[ENU=Location Code;
                                                              ENG=Location Code] }
    { 84  ;   ;Fax No.             ;Text30        ;CaptionML=[ENU=Fax No.;
                                                              ENG=Fax No.] }
    { 85  ;   ;Telex Answer Back   ;Text20        ;CaptionML=[ENU=Telex Answer Back;
                                                              ENG=Telex Answer Back] }
    { 91  ;   ;Post Code           ;Code20        ;TableRelation=IF (Country/Region Code=CONST()) "Post Code"
                                                                 ELSE IF (Country/Region Code=FILTER(<>'')) "Post Code" WHERE (Country/Region Code=FIELD(Country/Region Code));
                                                   OnValidate=VAR
                                                                GLSetup@1040003 : Record 98;
                                                                PCTerritory@1040007 : Record 60738;
                                                                GetPostCode@1040002 : Codeunit 60700;
                                                                TmpName@1040001 : Text[30];
                                                                TmpName2@1040000 : Text[30];
                                                                QASMgmt@1040004 : Codeunit 60711;
                                                                TempPos@1040005 : Integer;
                                                                TempStr@1040006 : Text[30];
                                                                TempDistrict@1040009 : Text[30];
                                                                i@1040008 : Integer;
                                                                LoqateFunctions@1000000000 : Codeunit 50002;
                                                                NewPostCode@1000000001 : Code[20];
                                                              BEGIN
                                                                // SDL1.000 START
                                                                IF (CurrFieldNo = FIELDNO("Post Code")) AND ("Post Code" <> '') THEN
                                                                //DOC OP14491 DB 22/11/2018 -
                                                                  BEGIN
                                                                    IF LoqateFunctions.CheckEnabled AND GUIALLOWED THEN BEGIN
                                                                      //DOC OP14491 DB 22/11/2018 -
                                                                      //LoqateFunctions.CaptureInteractiveFind("Post Code",Name,Address,"Address 2",City,County,"Post Code");
                                                                      LoqateFunctions.CaptureInteractiveFind("Post Code",Name,Address,"Address 2",City,County,NewPostCode);
                                                                      IF NewPostCode<>'' THEN
                                                                        "Post Code" := NewPostCode
                                                                      ELSE
                                                                        "Post Code" := xRec."Post Code";
                                                                      //DOC OP14491 DB 22/11/2018 +
                                                                  END ELSE BEGIN
                                                                //DOC OP14491 DB 22/11/2018 +
                                                                  IF QASMgmt.QASEnabledAndApplicable("Post Code") THEN
                                                                    IF NOT QASMgmt.ShipToAddrSearch("Post Code", Rec) THEN
                                                                      IF NOT CONFIRM(Text60700, FALSE, FIELDCAPTION("Post Code")) THEN
                                                                        ERROR('');
                                                                //DOC OP14491 DB 22/11/2018 -
                                                                  END;
                                                                END;
                                                                //DOC OP14491 DB 22/11/2018 +

                                                                {
                                                                // QAS Rapid Integration
                                                                // SDL014 - START()
                                                                //PostCode.ValidatePostCode(City,"Post Code",County,"Country/Region Code",(CurrFieldNo <> 0) AND GUIALLOWED);
                                                                GLSetup.GET;
                                                                IF GLSetup."Post Code Integration" THEN
                                                                  GetPostCode.PostCodeGetAddr(TmpName,TmpName2,Address,"Address 2",City,County,"Post Code","Country/Region Code");
                                                                // SDL014 - END
                                                                }

                                                                // ------ SDL1.000

                                                                //First half of postcode
                                                                TempPos := STRPOS("Post Code",' ');
                                                                IF TempPos <> 0 THEN
                                                                  TempStr := COPYSTR("Post Code",1,TempPos);

                                                                //Use District as fallback option
                                                                IF TempStr <> '' THEN
                                                                  FOR i := 1 TO STRLEN(TempStr) DO
                                                                    IF UPPERCASE(COPYSTR(TempStr,i,1)) IN ['A'..'Z'] THEN
                                                                      TempDistrict := TempDistrict + UPPERCASE(COPYSTR(TempStr,i,1));

                                                                IF PCTerritory.GET(TempStr) THEN
                                                                  VALIDATE("Territory Code",PCTerritory."Territory Code")
                                                                ELSE IF PCTerritory.GET(TempDistrict) THEN
                                                                  VALIDATE("Territory Code",PCTerritory."Territory Code");

                                                                // ------ SDL1.000
                                                              END;

                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=[ENU=Post Code;
                                                              ENG=Post Code] }
    { 92  ;   ;County              ;Text30        ;CaptionML=[ENU=County;
                                                              ENG=County] }
    { 102 ;   ;E-Mail              ;Text80        ;ExtendedDatatype=E-Mail;
                                                   CaptionML=[ENU=E-Mail;
                                                              ENG=E-Mail] }
    { 103 ;   ;Home Page           ;Text80        ;ExtendedDatatype=URL;
                                                   CaptionML=[ENU=Home Page;
                                                              ENG=Home Page] }
    { 108 ;   ;Tax Area Code       ;Code20        ;TableRelation="Tax Area";
                                                   CaptionML=[ENU=Tax Area Code;
                                                              ENG=VAT Area Code] }
    { 109 ;   ;Tax Liable          ;Boolean       ;CaptionML=[ENU=Tax Liable;
                                                              ENG=VAT Liable] }
    { 5792;   ;Shipping Agent Service Code;Code10 ;TableRelation="Shipping Agent Services".Code WHERE (Shipping Agent Code=FIELD(Shipping Agent Code));
                                                   CaptionML=[ENU=Shipping Agent Service Code;
                                                              ENG=Shipping Agent Service Code] }
    { 5900;   ;Service Zone Code   ;Code10        ;TableRelation="Service Zone";
                                                   CaptionML=[ENU=Service Zone Code;
                                                              ENG=Service Zone Code] }
    { 60700;  ;Territory Code      ;Code10        ;TableRelation=Territory;
                                                   CaptionML=[ENU=Territory Code;
                                                              ENG=Territory Code] }
    { 60740;  ;Special Instruction 1;Text25       ;TableRelation="Special Shipping Instruction".Instruction;
                                                   Description=SDL1.109 }
    { 60741;  ;Special Instruction 2;Text25       ;Description=SDL1.109 }
    { 60742;  ;Residential Property;Boolean       ;Description=SDL1.109 }
    { 60743;  ;Email For Carrier Confirm;Text50   ;Description=SDL1.109 }
    { 60744;  ;Phone For Carrier Confirm;Text20   ;Description=SDL1.109 }
    { 60745;  ;Collection On Delivery;Boolean     ;Description=SDL1.109 }
    { 60746;  ;Magento_Add_Id      ;Code20        ;Description=WCL }
    { 60747;  ;Created Date_Time   ;DateTime      ;Description=WCL }
    { 60748;  ;Last Modified Date_Time;DateTime   ;Description=WCL }
    { 60749;  ;Address Select      ;Boolean       ;Description=WCL }
  }
  KEYS
  {
    {    ;Customer No.,Code                       ;Clustered=Yes }
  }
  FIELDGROUPS
  {
    { 1   ;DropDown            ;Code,Name,Address,City,Post Code         }
  }
  CODE
  {
    VAR
      Text000@1000 : TextConst 'ENU=untitled;ENG=untitled';
      Cust@1001 : Record 18;
      PostCode@1002 : Record 225;
      Text001@1003 : TextConst 'ENU=Before you can use Online Map, you must fill in the Online Map Setup window.\See Setting Up Online Map in Help.;ENG=Before you can use Online Map, you must fill in the Online Map Setup window.\See Setting Up Online Map in Help.';
      Text60700@1040000 : TextConst 'ENU=Address Search unsuccessful.\\Do you wish to keep the new %1?;ENG=Address Search unsuccessful.\\Do you wish to keep the new %1?';

    PROCEDURE Caption@1() : Text[130];
    BEGIN
      IF "Customer No." = '' THEN
        EXIT(Text000);
      Cust.GET("Customer No.");
      EXIT(STRSUBSTNO('%1 %2 %3 %4',Cust."No.",Cust.Name,Code,Name));
    END;

    PROCEDURE DisplayMap@8();
    VAR
      MapPoint@1001 : Record 800;
      MapMgt@1000 : Codeunit 802;
    BEGIN
      IF MapPoint.FINDFIRST THEN
        MapMgt.MakeSelection(DATABASE::"Ship-to Address",GETPOSITION)
      ELSE
        MESSAGE(Text001);
    END;

    BEGIN
    {
      SDL1.000 - A Ireland QUK 23/2/09
        Changed QAS Rapid integration on Post Code field to work with QAS Pro Web
      16.06.09  IJF
        Territory Code now validated on validation of "Country/Region Code".
      SDL1.036 - J Parr QUK 22/9/09 J42845
        Country code only validates territory code if it is blank alreay and the country has a territory code
      SDL1.109 - 10/09/12 - DJR QUK
        Added F60740 - F60745
      //DOC OP14491 DB 22/11/2018 - Added Loqate functionality.
    }
    END.
  }
}

OBJECT Table 224 Order Address
{
  OBJECT-PROPERTIES
  {
    Date=22/11/18;
    Time=11:04:42;
    Modified=Yes;
    Version List=NAVW17.00,OP14491;
  }
  PROPERTIES
  {
    DataCaptionFields=Vendor No.,Name,Code;
    OnInsert=BEGIN
               Vend.GET("Vendor No.");
               Name := Vend.Name;
             END;

    OnModify=BEGIN
               "Last Date Modified" := TODAY;
             END;

    OnRename=BEGIN
               "Last Date Modified" := TODAY;
             END;

    CaptionML=[ENU=Order Address;
               ENG=Order Address];
    LookupPageID=Page369;
  }
  FIELDS
  {
    { 1   ;   ;Vendor No.          ;Code20        ;TableRelation=Vendor;
                                                   CaptionML=[ENU=Vendor No.;
                                                              ENG=Vendor No.];
                                                   NotBlank=Yes }
    { 2   ;   ;Code                ;Code10        ;CaptionML=[ENU=Code;
                                                              ENG=Code];
                                                   NotBlank=Yes }
    { 3   ;   ;Name                ;Text50        ;CaptionML=[ENU=Name;
                                                              ENG=Name] }
    { 4   ;   ;Name 2              ;Text50        ;CaptionML=[ENU=Name 2;
                                                              ENG=Name 2] }
    { 5   ;   ;Address             ;Text50        ;CaptionML=[ENU=Address;
                                                              ENG=Address] }
    { 6   ;   ;Address 2           ;Text50        ;CaptionML=[ENU=Address 2;
                                                              ENG=Address 2] }
    { 7   ;   ;City                ;Text30        ;TableRelation=IF (Country/Region Code=CONST()) "Post Code".City
                                                                 ELSE IF (Country/Region Code=FILTER(<>'')) "Post Code".City WHERE (Country/Region Code=FIELD(Country/Region Code));
                                                   OnValidate=BEGIN
                                                                PostCode.ValidateCity(City,"Post Code",County,"Country/Region Code",(CurrFieldNo <> 0) AND GUIALLOWED);
                                                              END;

                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=[ENU=City;
                                                              ENG=City] }
    { 8   ;   ;Contact             ;Text50        ;CaptionML=[ENU=Contact;
                                                              ENG=Contact] }
    { 9   ;   ;Phone No.           ;Text30        ;ExtendedDatatype=Phone No.;
                                                   CaptionML=[ENU=Phone No.;
                                                              ENG=Phone No.] }
    { 10  ;   ;Telex No.           ;Text30        ;CaptionML=[ENU=Telex No.;
                                                              ENG=Telex No.] }
    { 35  ;   ;Country/Region Code ;Code10        ;TableRelation=Country/Region;
                                                   CaptionML=[ENU=Country/Region Code;
                                                              ENG=Country/Region Code] }
    { 54  ;   ;Last Date Modified  ;Date          ;CaptionML=[ENU=Last Date Modified;
                                                              ENG=Last Date Modified];
                                                   Editable=No }
    { 84  ;   ;Fax No.             ;Text30        ;CaptionML=[ENU=Fax No.;
                                                              ENG=Fax No.] }
    { 85  ;   ;Telex Answer Back   ;Text20        ;CaptionML=[ENU=Telex Answer Back;
                                                              ENG=Telex Answer Back] }
    { 91  ;   ;Post Code           ;Code20        ;TableRelation=IF (Country/Region Code=CONST()) "Post Code"
                                                                 ELSE IF (Country/Region Code=FILTER(<>'')) "Post Code" WHERE (Country/Region Code=FIELD(Country/Region Code));
                                                   OnValidate=VAR
                                                                LoqateFunctions@1000000000 : Codeunit 50002;
                                                                NewPostCode@1000000001 : Code[20];
                                                              BEGIN
                                                                //DOC OP14491 DB 22/11/2018 -
                                                                //PostCode.ValidatePostCode(City,"Post Code",County,"Country/Region Code",(CurrFieldNo <> 0) AND GUIALLOWED);
                                                                IF (CurrFieldNo = FIELDNO("Post Code")) AND ("Post Code" <> '') THEN BEGIN
                                                                  IF LoqateFunctions.CheckEnabled AND GUIALLOWED THEN BEGIN
                                                                    LoqateFunctions.CaptureInteractiveFind("Post Code",Name,Address,"Address 2",City,County,NewPostCode);
                                                                    IF NewPostCode<>'' THEN
                                                                      "Post Code" := NewPostCode
                                                                    ELSE
                                                                      "Post Code" := xRec."Post Code";
                                                                  END ELSE
                                                                    PostCode.ValidatePostCode(City,"Post Code",County,"Country/Region Code",(CurrFieldNo <> 0) AND GUIALLOWED);
                                                                END;
                                                                //DOC OP14491 DB 22/11/2018 +
                                                              END;

                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=[ENU=Post Code;
                                                              ENG=Post Code] }
    { 92  ;   ;County              ;Text30        ;CaptionML=[ENU=County;
                                                              ENG=County] }
    { 102 ;   ;E-Mail              ;Text80        ;ExtendedDatatype=E-Mail;
                                                   CaptionML=[ENU=E-Mail;
                                                              ENG=E-Mail] }
    { 103 ;   ;Home Page           ;Text80        ;ExtendedDatatype=URL;
                                                   CaptionML=[ENU=Home Page;
                                                              ENG=Home Page] }
  }
  KEYS
  {
    {    ;Vendor No.,Code                         ;Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      Text000@1000 : TextConst 'ENU=untitled;ENG=untitled';
      Vend@1001 : Record 23;
      PostCode@1002 : Record 225;
      Text001@1003 : TextConst 'ENU=Before you can use Online Map, you must fill in the Online Map Setup window.\See Setting Up Online Map in Help.;ENG=Before you can use Online Map, you must fill in the Online Map Setup window.\See Setting Up Online Map in Help.';

    PROCEDURE Caption@1() : Text[130];
    BEGIN
      IF "Vendor No." = '' THEN
        EXIT(Text000);
      Vend.GET("Vendor No.");
      EXIT(STRSUBSTNO('%1 %2 %3 %4',Vend."No.",Vend.Name,Code,Name));
    END;

    PROCEDURE DisplayMap@8();
    VAR
      MapPoint@1001 : Record 800;
      MapMgt@1000 : Codeunit 802;
    BEGIN
      IF MapPoint.FINDFIRST THEN
        MapMgt.MakeSelection(DATABASE::"Order Address",GETPOSITION)
      ELSE
        MESSAGE(Text001);
    END;

    BEGIN
    {
      //DOC OP14491 DB 22/11/2018 - Added Loqate functionality.
    }
    END.
  }
}

OBJECT Table 5050 Contact
{
  OBJECT-PROPERTIES
  {
    Date=27/11/18;
    Time=18:07:58;
    Modified=Yes;
    Version List=NAVW17.10,QAS,SDL2.013,DTM,OP10442,OP10610,OP11992,OP13346,OP13472,OP14430,OP14491;
  }
  PROPERTIES
  {
    Permissions=TableData 5065=r;
    DataCaptionFields=No.,Name;
    OnInsert=BEGIN
               RMSetup.GET;

               IF "No." = '' THEN BEGIN
                 RMSetup.TESTFIELD("Contact Nos.");
                 NoSeriesMgt.InitSeries(RMSetup."Contact Nos.",xRec."No. Series",0D,"No.","No. Series");
               END;

               IF NOT SkipDefaults THEN BEGIN
                 IF "Salesperson Code" = '' THEN
                   "Salesperson Code" := RMSetup."Default Salesperson Code";
                 IF "Territory Code" = '' THEN
                   "Territory Code" := RMSetup."Default Territory Code";
                 IF "Country/Region Code" = '' THEN
                   "Country/Region Code" := RMSetup."Default Country/Region Code";
                 IF "Language Code" = '' THEN
                   "Language Code" := RMSetup."Default Language Code";
                 IF "Correspondence Type" = "Correspondence Type"::" " THEN
                   "Correspondence Type" := RMSetup."Default Correspondence Type";
                 IF "Salutation Code" = '' THEN
                   IF Type = Type::Company THEN
                     "Salutation Code" := RMSetup."Def. Company Salutation Code"
                   ELSE
                     "Salutation Code" := RMSetup."Default Person Salutation Code";
               END;

               TypeChange;

               // SDL2.013 - START
               "Date Created" := CURRENTDATETIME;
               "Created By" := USERID;
               // SDL2.013 - FINISH

               "Last Date Modified" := TODAY;
               "Last Time Modified" := TIME;

               "Default Dimension Code" := RMSetup."Default Dimension Code"; // SDL048

               SetToTransfer(); //DOC OP10442 -+
             END;

    OnModify=BEGIN
               IF ("Company Name"<>'')OR(Name <>'')THEN BEGIN
                  RecCust.RESET;
                  RecCust.SETRANGE("Primary Contact No.","No.");
                  IF RecCust.FINDFIRST THEN BEGIN
                    RecCust.MODIFY(TRUE);
                  END;
               END;
               OnModify(xRec);

               SetToTransfer(); //DOC OP10442 -+

               IF ("Company Name" <> xRec."Company Name") THEN BEGIN
                 ProcessNameChange;
                 //MESSAGE('Company Updated');
               END;
             END;

    OnDelete=VAR
               Todo@1000 : Record 5080;
               SegLine@1001 : Record 5077;
               ContIndustGrp@1002 : Record 5058;
               ContactWebSource@1003 : Record 5060;
               ContJobResp@1004 : Record 5067;
               ContMailingGrp@1005 : Record 5056;
               ContProfileAnswer@1006 : Record 5089;
               RMCommentLine@1007 : Record 5061;
               ContAltAddr@1008 : Record 5051;
               ContAltAddrDateRange@1009 : Record 5052;
               InteractLogEntry@1010 : Record 5065;
               Opp@1011 : Record 5092;
               DOPaymentCreditCard@1017 : Record 827;
               CampaignTargetGrMgt@1016 : Codeunit 7030;
             BEGIN
               DOPaymentCreditCard.DeleteByContact(Rec);

               Todo.SETCURRENTKEY("Contact Company No.","Contact No.",Closed,Date);
               Todo.SETRANGE("Contact Company No.","Company No.");
               Todo.SETRANGE("Contact No.","No.");
               Todo.SETRANGE(Closed,FALSE);
               IF Todo.FIND('-') THEN
                 ERROR(Text000,TABLECAPTION,"No.");

               SegLine.SETCURRENTKEY("Contact No.");
               SegLine.SETRANGE("Contact No.","No.");
               IF SegLine.FINDFIRST THEN
                 ERROR(Text001,TABLECAPTION,"No.");

               Opp.SETCURRENTKEY("Contact Company No.","Contact No.");
               Opp.SETRANGE("Contact Company No.","Company No.");
               Opp.SETRANGE("Contact No.","No.");
               Opp.SETRANGE(Status,Opp.Status::"Not Started",Opp.Status::"In Progress");
               IF Opp.FIND('-') THEN
                 ERROR(Text002,TABLECAPTION,"No.");

               CASE Type OF
                 Type::Company:
                   BEGIN
                     ContBusRel.SETRANGE("Contact No.","No.");
                     ContBusRel.DELETEALL;
                     ContIndustGrp.SETRANGE("Contact No.","No.");
                     ContIndustGrp.DELETEALL;
                     ContactWebSource.SETRANGE("Contact No.","No.");
                     ContactWebSource.DELETEALL;
                     DuplMgt.RemoveContIndex(Rec,FALSE);
                     InteractLogEntry.SETCURRENTKEY("Contact Company No.");
                     InteractLogEntry.SETRANGE("Contact Company No.","No.");
                     IF InteractLogEntry.FIND('-') THEN
                       REPEAT
                         CampaignTargetGrMgt.DeleteContfromTargetGr(InteractLogEntry);
                         CLEAR(InteractLogEntry."Contact Company No.");
                         CLEAR(InteractLogEntry."Contact No.");
                         InteractLogEntry.MODIFY;
                       UNTIL InteractLogEntry.NEXT = 0;

                     Cont.RESET;
                     Cont.SETCURRENTKEY("Company No.");
                     Cont.SETRANGE("Company No.","No.");
                     Cont.SETRANGE(Type,Type::Person);
                     IF Cont.FIND('-') THEN
                       REPEAT
                         Cont.DELETE(TRUE);
                       UNTIL Cont.NEXT = 0;

                     Opp.RESET;
                     Opp.SETCURRENTKEY("Contact Company No.","Contact No.");
                     Opp.SETRANGE("Contact Company No.","Company No.");
                     Opp.SETRANGE("Contact No.","No.");
                     IF Opp.FIND('-') THEN
                       REPEAT
                         CLEAR(Opp."Contact No.");
                         CLEAR(Opp."Contact Company No.");
                         Opp.MODIFY;
                       UNTIL Opp.NEXT = 0;

                     Todo.RESET;
                     Todo.SETCURRENTKEY("Contact Company No.");
                     Todo.SETRANGE("Contact Company No.","Company No.");
                     IF Todo.FIND('-') THEN
                       REPEAT
                         CLEAR(Todo."Contact No.");
                         CLEAR(Todo."Contact Company No.");
                         Todo.MODIFY;
                       UNTIL Todo.NEXT = 0;
                   END;
                 Type::Person:
                   BEGIN
                     ContJobResp.SETRANGE("Contact No.","No.");
                     ContJobResp.DELETEALL;

                     InteractLogEntry.SETCURRENTKEY("Contact Company No.","Contact No.");
                     InteractLogEntry.SETRANGE("Contact Company No.","Company No.");
                     InteractLogEntry.SETRANGE("Contact No.","No.");
                     InteractLogEntry.MODIFYALL("Contact No.","Company No.");

                     Opp.RESET;
                     Opp.SETCURRENTKEY("Contact Company No.","Contact No.");
                     Opp.SETRANGE("Contact Company No.","Company No.");
                     Opp.SETRANGE("Contact No.","No.");
                     Opp.MODIFYALL("Contact No.","Company No.");

                     Todo.RESET;
                     Todo.SETCURRENTKEY("Contact Company No.","Contact No.");
                     Todo.SETRANGE("Contact Company No.","Company No.");
                     Todo.SETRANGE("Contact No.","No.");
                     Todo.MODIFYALL("Contact No.","Company No.");
                   END;
               END;

               ContMailingGrp.SETRANGE("Contact No.","No.");
               ContMailingGrp.DELETEALL;

               ContProfileAnswer.SETRANGE("Contact No.","No.");
               ContProfileAnswer.DELETEALL;

               RMCommentLine.SETRANGE("Table Name",RMCommentLine."Table Name"::Contact);
               RMCommentLine.SETRANGE("No.","No.");
               RMCommentLine.SETRANGE("Sub No.",0);
               RMCommentLine.DELETEALL;

               ContAltAddr.SETRANGE("Contact No.","No.");
               ContAltAddr.DELETEALL;

               ContAltAddrDateRange.SETRANGE("Contact No.","No.");
               ContAltAddrDateRange.DELETEALL;
             END;

    OnRename=BEGIN
               VALIDATE("Lookup Contact No.");
             END;

    CaptionML=[ENU=Contact;
               ENG=Contact];
    LookupPageID=Page5052;
  }
  FIELDS
  {
    { 1   ;   ;No.                 ;Code20        ;AltSearchField=Search Name;
                                                   OnValidate=BEGIN
                                                                IF "No." <> xRec."No." THEN BEGIN
                                                                  RMSetup.GET;
                                                                  NoSeriesMgt.TestManual(RMSetup."Contact Nos.");
                                                                  "No. Series" := '';
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=No.;
                                                              ENG=No.] }
    { 2   ;   ;Name                ;Text50        ;OnValidate=BEGIN
                                                                NameBreakdown;
                                                                ProcessNameChange;
                                                              END;

                                                   CaptionML=[ENU=Name;
                                                              ENG=Name];
                                                   Title=Yes }
    { 3   ;   ;Search Name         ;Code50        ;CaptionML=[ENU=Search Name;
                                                              ENG=Search Name] }
    { 4   ;   ;Name 2              ;Text50        ;CaptionML=[ENU=Name 2;
                                                              ENG=Name 2] }
    { 5   ;   ;Address             ;Text50        ;CaptionML=[ENU=Address;
                                                              ENG=Address];
                                                   Title=Yes }
    { 6   ;   ;Address 2           ;Text50        ;CaptionML=[ENU=Address 2;
                                                              ENG=Address 2];
                                                   Title=Yes }
    { 7   ;   ;City                ;Text30        ;TableRelation=IF (Country/Region Code=CONST()) "Post Code".City
                                                                 ELSE IF (Country/Region Code=FILTER(<>'')) "Post Code".City WHERE (Country/Region Code=FIELD(Country/Region Code));
                                                   OnValidate=BEGIN
                                                                PostCode.ValidateCity(City,"Post Code",County,"Country/Region Code",(CurrFieldNo <> 0) AND GUIALLOWED);
                                                              END;

                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=[ENU=City;
                                                              ENG=City];
                                                   Title=Yes }
    { 9   ;   ;Phone No.           ;Text30        ;ExtendedDatatype=Phone No.;
                                                   CaptionML=[ENU=Phone No.;
                                                              ENG=Phone No.] }
    { 10  ;   ;Telex No.           ;Text20        ;CaptionML=[ENU=Telex No.;
                                                              ENG=Telex No.] }
    { 15  ;   ;Territory Code      ;Code10        ;TableRelation=Territory;
                                                   CaptionML=[ENU=Territory Code;
                                                              ENG=Territory Code] }
    { 22  ;   ;Currency Code       ;Code10        ;TableRelation=Currency;
                                                   CaptionML=[ENU=Currency Code;
                                                              ENG=Currency Code] }
    { 24  ;   ;Language Code       ;Code10        ;TableRelation=Language;
                                                   CaptionML=[ENU=Language Code;
                                                              ENG=Language Code] }
    { 29  ;   ;Salesperson Code    ;Code10        ;TableRelation=Salesperson/Purchaser;
                                                   CaptionML=[ENU=Salesperson Code;
                                                              ENG=Salesperson Code] }
    { 35  ;   ;Country/Region Code ;Code10        ;InitValue=GB;
                                                   TableRelation=Country/Region;
                                                   OnValidate=VAR
                                                                Country@1040000 : Record 9;
                                                              BEGIN
                                                                // ------ SDL1.000
                                                                IF ((xRec."Country/Region Code" <> Rec."Country/Region Code") AND ("Country/Region Code" <> '')) THEN BEGIN
                                                                  Country.GET("Country/Region Code");
                                                                  VALIDATE("Territory Code",Country."Territory Code");
                                                                END;
                                                                // ------ SDL1.000
                                                              END;

                                                   CaptionML=[ENU=Country/Region Code;
                                                              ENG=Country/Region Code] }
    { 38  ;   ;Comment             ;Boolean       ;FieldClass=FlowField;
                                                   CalcFormula=Exist("Rlshp. Mgt. Comment Line" WHERE (Table Name=CONST(Contact),
                                                                                                       No.=FIELD(No.),
                                                                                                       Sub No.=CONST(0)));
                                                   CaptionML=[ENU=Comment;
                                                              ENG=Comment];
                                                   Editable=No }
    { 54  ;   ;Last Date Modified  ;Date          ;CaptionML=[ENU=Last Date Modified;
                                                              ENG=Last Date Modified];
                                                   Editable=No }
    { 84  ;   ;Fax No.             ;Text30        ;CaptionML=[ENU=Fax No.;
                                                              ENG=Fax No.] }
    { 85  ;   ;Telex Answer Back   ;Text20        ;CaptionML=[ENU=Telex Answer Back;
                                                              ENG=Telex Answer Back] }
    { 86  ;   ;VAT Registration No.;Text20        ;OnValidate=VAR
                                                                VATRegNoFormat@1000 : Record 381;
                                                              BEGIN
                                                                VATRegNoFormat.Test("VAT Registration No.","Country/Region Code","No.",DATABASE::Contact);
                                                              END;

                                                   CaptionML=[ENU=VAT Registration No.;
                                                              ENG=VAT Registration No.] }
    { 89  ;   ;Picture             ;BLOB          ;CaptionML=[ENU=Picture;
                                                              ENG=Picture];
                                                   SubType=Bitmap }
    { 91  ;   ;Post Code           ;Code20        ;TableRelation=IF (Country/Region Code=CONST()) "Post Code"
                                                                 ELSE IF (Country/Region Code=FILTER(<>'')) "Post Code" WHERE (Country/Region Code=FIELD(Country/Region Code));
                                                   OnValidate=VAR
                                                                GLSetup@1040003 : Record 98;
                                                                PCTerritory@1040005 : Record 60738;
                                                                GetPostCode@1040002 : Codeunit 60700;
                                                                TmpName@1040001 : Text[30];
                                                                TmpName2@1040000 : Text[30];
                                                                QASMgmt@1040004 : Codeunit 60711;
                                                                TempPos@1040006 : Integer;
                                                                TempStr@1040007 : Text[30];
                                                                TempDistrict@1040008 : Text[30];
                                                                i@1040009 : Integer;
                                                                LoqateFunctions@1000000000 : Codeunit 50002;
                                                                NewPostCode@1000000001 : Code[20];
                                                              BEGIN
                                                                // SDL1.000 START
                                                                IF (CurrFieldNo = FIELDNO("Post Code")) AND ("Post Code" <> '') THEN

                                                                //DOC OP14491 DRM 16/11/2018 -
                                                                BEGIN
                                                                  IF LoqateFunctions.CheckEnabled AND GUIALLOWED THEN BEGIN
                                                                    //DOC OP14491 DB 22/11/2018 -
                                                                    //LoqateFunctions.CaptureInteractiveFind("Post Code","Company Name",Address,"Address 2",City,County,"Post Code");
                                                                    LoqateFunctions.CaptureInteractiveFind("Post Code","Company Name",Address,"Address 2",City,County,NewPostCode);
                                                                    IF NewPostCode<>'' THEN
                                                                      "Post Code" := NewPostCode
                                                                    ELSE
                                                                      "Post Code" := xRec."Post Code";
                                                                    //DOC OP14491 DB 22/11/2018 +
                                                                  END ELSE BEGIN
                                                                //DOC OP14491 DRM 16/11/2018 +

                                                                    IF QASMgmt.QASEnabledAndApplicable("Post Code") THEN
                                                                      IF NOT QASMgmt.ContactSearch("Post Code", Rec) THEN
                                                                        IF NOT CONFIRM(Text60700, FALSE, FIELDCAPTION("Post Code")) THEN
                                                                          ERROR('');

                                                                //DOC OP14491 DRM 16/11/2018 -
                                                                  END;
                                                                END;
                                                                //DOC OP14491 DRM 16/11/2018 +

                                                                {
                                                                // QAS Rapid Integration
                                                                // SDL014 - START()
                                                                //PostCode.ValidatePostCode(City,"Post Code",County,"Country/Region Code",(CurrFieldNo <> 0) AND GUIALLOWED);
                                                                GLSetup.GET;
                                                                IF GLSetup."Post Code Integration" THEN
                                                                  GetPostCode.PostCodeGetAddr(TmpName,TmpName2,Address,"Address 2",City,County,"Post Code","Country/Region Code");
                                                                // SDL014 - END
                                                                }
                                                                // SDL1.000 FINISH

                                                                // ------ SDL1.000
                                                                // First portion of Postcode
                                                                TempPos := STRPOS("Post Code",' ');
                                                                IF TempPos <> 0 THEN
                                                                  TempStr := COPYSTR("Post Code",1,TempPos);

                                                                //Use District as fallback option
                                                                IF TempStr <> '' THEN
                                                                  FOR i := 1 TO STRLEN(TempStr) DO
                                                                    IF UPPERCASE(COPYSTR(TempStr,i,1)) IN ['A'..'Z'] THEN
                                                                      TempDistrict := TempDistrict + UPPERCASE(COPYSTR(TempStr,i,1));

                                                                IF PCTerritory.GET(TempStr) THEN
                                                                  VALIDATE("Territory Code",PCTerritory."Territory Code")
                                                                ELSE IF PCTerritory.GET(TempDistrict) THEN
                                                                  VALIDATE("Territory Code",PCTerritory."Territory Code");

                                                                // ------ SDL1.000
                                                              END;

                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=[ENU=Post Code;
                                                              ENG=Post Code] }
    { 92  ;   ;County              ;Text30        ;CaptionML=[ENU=County;
                                                              ENG=County];
                                                   Title=Yes }
    { 102 ;   ;E-Mail              ;Text80        ;OnValidate=VAR
                                                                CheckContact@100000000 : Record 5050;
                                                                DuplicateEmailError@100000001 : TextConst 'ENU=That email address exists against #1other Contact(s). Please make sure that only the correct Contact has this email address.;ENG=That email address exists against #1other Contact(s). Please make sure that only the correct Contact has this email address.';
                                                                EmailFormatError@100000002 : TextConst 'ENU=That e-mail address does not appear to be valid. Please re-check the e-mail address that you entered.;ENG=That e-mail address does not appear to be valid. Please re-check the e-mail address that you entered.';
                                                                Duplicates@100000003 : Integer;
                                                                RegEx@100000004 : DotNet "'System, Version=2.0.0.0, Culture=neutral,
                                                               PublicKeyToken=b77a5c561934e089'.System.Text.RegularExpressions.Regex";
                                                                RegExOptions@100000005 : DotNet "'System, Version=2.0.0.0, Culture=neutral,
                                                               PublicKeyToken=b77a5c561934e089'.System.Text.RegularExpressions.RegexOptions";
                                                              BEGIN
                                                                //DOC OP14430 MPH 16/11/2018 -
                                                                IF GUIALLOWED THEN BEGIN
                                                                  IF "E-Mail" <> '' THEN BEGIN
                                                                    CheckContact.SETRANGE("E-Mail", "E-Mail");
                                                                    Duplicates := CheckContact.COUNT;
                                                                    IF Duplicates > 0 THEN
                                                                      ERROR(DuplicateEmailError, Duplicates);

                                                                    IF NOT RegEx.IsMatch("E-Mail", '^[\w!#$%&*+\-/=?\^_`{|}~]+(\.[\w!#$%&*+\-/=?\^_`{|}~]+)*@((([\-\w]+\.)+[a-zA-Z]{2,4})|(([0-9]{1,3}\.){3}[0-9]{1,3}))$' , RegExOptions.IgnoreCase) THEN
                                                                      ERROR(EmailFormatError);
                                                                  END;
                                                                END;
                                                                //DOC OP14430 MPH 16/11/2018 +

                                                                IF ("Search E-Mail" = UPPERCASE(xRec."E-Mail")) OR ("Search E-Mail" = '') THEN
                                                                  "Search E-Mail" := "E-Mail";
                                                              END;

                                                   ExtendedDatatype=E-Mail;
                                                   CaptionML=[ENU=E-Mail;
                                                              ENG=E-Mail] }
    { 103 ;   ;Home Page           ;Text80        ;ExtendedDatatype=URL;
                                                   CaptionML=[ENU=Home Page;
                                                              ENG=Home Page] }
    { 107 ;   ;No. Series          ;Code10        ;TableRelation="No. Series";
                                                   CaptionML=[ENU=No. Series;
                                                              ENG=No. Series] }
    { 5050;   ;Type                ;Option        ;OnValidate=BEGIN
                                                                IF CurrFieldNo <> 0 THEN BEGIN
                                                                  TypeChange;
                                                                  MODIFY;
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Type;
                                                              ENG=Type];
                                                   OptionCaptionML=[ENU=Company,Person;
                                                                    ENG=Company,Person];
                                                   OptionString=Company,Person }
    { 5051;   ;Company No.         ;Code20        ;TableRelation=Contact WHERE (Type=CONST(Company));
                                                   OnValidate=VAR
                                                                Opp@1000 : Record 5092;
                                                                OppEntry@1001 : Record 5093;
                                                                Todo@1002 : Record 5080;
                                                                InteractLogEntry@1003 : Record 5065;
                                                                SegLine@1005 : Record 5077;
                                                                SalesHeader@1004 : Record 36;
                                                              BEGIN
                                                                IF "Company No." = xRec."Company No." THEN
                                                                  EXIT;

                                                                TESTFIELD(Type,Type::Person);

                                                                SegLine.SETCURRENTKEY("Contact No.");
                                                                SegLine.SETRANGE("Contact No.","No.");
                                                                IF SegLine.FINDFIRST THEN
                                                                  ERROR(Text012,FIELDCAPTION("Company No."));

                                                                IF Cont.GET("Company No.") THEN
                                                                  InheritCompanyToPersonData(Cont,xRec."Company No." = '')
                                                                ELSE
                                                                  CLEAR("Company Name");

                                                                IF Cont.GET("No.") THEN BEGIN
                                                                  IF xRec."Company No." <> '' THEN BEGIN
                                                                    Opp.SETCURRENTKEY("Contact Company No.","Contact No.");
                                                                    Opp.SETRANGE("Contact Company No.",xRec."Company No.");
                                                                    Opp.SETRANGE("Contact No.","No.");
                                                                    Opp.MODIFYALL("Contact No.",xRec."Company No.");
                                                                    OppEntry.SETCURRENTKEY("Contact Company No.","Contact No.");
                                                                    OppEntry.SETRANGE("Contact Company No.",xRec."Company No.");
                                                                    OppEntry.SETRANGE("Contact No.","No.");
                                                                    OppEntry.MODIFYALL("Contact No.",xRec."Company No.");
                                                                    Todo.SETCURRENTKEY("Contact Company No.","Contact No.");
                                                                    Todo.SETRANGE("Contact Company No.",xRec."Company No.");
                                                                    Todo.SETRANGE("Contact No.","No.");
                                                                    Todo.MODIFYALL("Contact No.",xRec."Company No.");
                                                                    InteractLogEntry.SETCURRENTKEY("Contact Company No.","Contact No.");
                                                                    InteractLogEntry.SETRANGE("Contact Company No.",xRec."Company No.");
                                                                    InteractLogEntry.SETRANGE("Contact No.","No.");
                                                                    InteractLogEntry.MODIFYALL("Contact No.",xRec."Company No.");
                                                                    ContBusRel.RESET;
                                                                    ContBusRel.SETCURRENTKEY("Link to Table","No.");
                                                                    ContBusRel.SETRANGE("Link to Table",ContBusRel."Link to Table"::Customer);
                                                                    ContBusRel.SETRANGE("Contact No.",xRec."Company No.");
                                                                    SalesHeader.SETCURRENTKEY("Sell-to Customer No.","External Document No.");
                                                                    SalesHeader.SETRANGE("Sell-to Contact No.","No.");
                                                                    IF ContBusRel.FINDFIRST THEN
                                                                      SalesHeader.SETRANGE("Sell-to Customer No.",ContBusRel."No.")
                                                                    ELSE
                                                                      SalesHeader.SETRANGE("Sell-to Customer No.",'');
                                                                    IF SalesHeader.FIND('-') THEN
                                                                      REPEAT
                                                                        SalesHeader."Sell-to Contact No." := xRec."Company No.";
                                                                        IF SalesHeader."Sell-to Contact No." = SalesHeader."Bill-to Contact No." THEN
                                                                          SalesHeader."Bill-to Contact No." := xRec."Company No.";
                                                                        SalesHeader.MODIFY;
                                                                      UNTIL SalesHeader.NEXT = 0;
                                                                    SalesHeader.RESET;
                                                                    SalesHeader.SETCURRENTKEY("Bill-to Contact No.");
                                                                    SalesHeader.SETRANGE("Bill-to Contact No.","No.");
                                                                    SalesHeader.MODIFYALL("Bill-to Contact No.",xRec."Company No.");
                                                                  END ELSE BEGIN
                                                                    Opp.SETCURRENTKEY("Contact Company No.","Contact No.");
                                                                    Opp.SETRANGE("Contact Company No.",'');
                                                                    Opp.SETRANGE("Contact No.","No.");
                                                                    Opp.MODIFYALL("Contact Company No.","Company No.");
                                                                    OppEntry.SETCURRENTKEY("Contact Company No.","Contact No.");
                                                                    OppEntry.SETRANGE("Contact Company No.",'');
                                                                    OppEntry.SETRANGE("Contact No.","No.");
                                                                    OppEntry.MODIFYALL("Contact Company No.","Company No.");
                                                                    Todo.SETCURRENTKEY("Contact Company No.","Contact No.");
                                                                    Todo.SETRANGE("Contact Company No.",'');
                                                                    Todo.SETRANGE("Contact No.","No.");
                                                                    Todo.MODIFYALL("Contact Company No.","Company No.");
                                                                    InteractLogEntry.SETCURRENTKEY("Contact Company No.","Contact No.");
                                                                    InteractLogEntry.SETRANGE("Contact Company No.",'');
                                                                    InteractLogEntry.SETRANGE("Contact No.","No.");
                                                                    InteractLogEntry.MODIFYALL("Contact Company No.","Company No.");
                                                                  END;
                                                                  IF CurrFieldNo <> 0 THEN
                                                                    MODIFY;
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Company No.;
                                                              ENG=Company No.] }
    { 5052;   ;Company Name        ;Text50        ;CaptionML=[ENU=Company Name;
                                                              ENG=Company Name] }
    { 5053;   ;Lookup Contact No.  ;Code20        ;TableRelation=Contact;
                                                   OnValidate=BEGIN
                                                                IF Type = Type::Company THEN
                                                                  "Lookup Contact No." := ''
                                                                ELSE
                                                                  "Lookup Contact No." := "No.";
                                                              END;

                                                   CaptionML=[ENU=Lookup Contact No.;
                                                              ENG=Lookup Contact No.];
                                                   Editable=No }
    { 5054;   ;First Name          ;Text30        ;OnValidate=BEGIN
                                                                Name := CalculatedName;
                                                                ProcessNameChange;
                                                              END;

                                                   CaptionML=[ENU=First Name;
                                                              ENG=First Name] }
    { 5055;   ;Middle Name         ;Text30        ;OnValidate=BEGIN
                                                                Name := CalculatedName;
                                                                ProcessNameChange;
                                                              END;

                                                   CaptionML=[ENU=Middle Name;
                                                              ENG=Middle Name] }
    { 5056;   ;Surname             ;Text30        ;OnValidate=BEGIN
                                                                Name := CalculatedName;
                                                                ProcessNameChange;
                                                              END;

                                                   CaptionML=[ENU=Surname;
                                                              ENG=Surname] }
    { 5058;   ;Job Title           ;Text30        ;CaptionML=[ENU=Job Title;
                                                              ENG=Job Title] }
    { 5059;   ;Initials            ;Text30        ;CaptionML=[ENU=Initials;
                                                              ENG=Initials] }
    { 5060;   ;Extension No.       ;Text30        ;CaptionML=[ENU=Extension No.;
                                                              ENG=Extension No.] }
    { 5061;   ;Mobile Phone No.    ;Text30        ;OnValidate=VAR
                                                                ContBusRel@1000000002 : Record 5054;
                                                                Cust@1000000001 : Record 18;
                                                              BEGIN
                                                                //DOC OP10610 DS 15/09/2017 -
                                                                IF ("Mobile Phone No." <> xRec."Mobile Phone No.") THEN BEGIN
                                                                  ContBusRel.RESET;
                                                                  ContBusRel.SETCURRENTKEY("Link to Table","Contact No.");
                                                                  ContBusRel.SETRANGE("Link to Table",ContBusRel."Link to Table"::Customer);
                                                                  ContBusRel.SETRANGE("Contact No.","Company No.");
                                                                  IF ContBusRel.FINDFIRST THEN BEGIN
                                                                    IF Cust.GET(ContBusRel."No.") THEN BEGIN
                                                                      IF Cust."Primary Contact No." = "No." THEN BEGIN
                                                                        Cust."Mobile No" := "Mobile Phone No.";
                                                                        Cust.MODIFY;
                                                                      END;
                                                                    END;
                                                                  END;

                                                                END;
                                                                //DOC OP10610 DS 15/09/2017 +
                                                              END;

                                                   ExtendedDatatype=Phone No.;
                                                   CaptionML=[ENU=Mobile Phone No.;
                                                              ENG=Mobile Phone No.] }
    { 5062;   ;Pager               ;Text30        ;CaptionML=[ENU=Pager;
                                                              ENG=Pager] }
    { 5063;   ;Organizational Level Code;Code10   ;TableRelation="Organizational Level";
                                                   CaptionML=[ENU=Organizational Level Code;
                                                              ENG=Organisational Level Code] }
    { 5064;   ;Exclude from Segment;Boolean       ;CaptionML=[ENU=Exclude from Segment;
                                                              ENG=Exclude from Segment] }
    { 5065;   ;Date Filter         ;Date          ;FieldClass=FlowFilter;
                                                   CaptionML=[ENU=Date Filter;
                                                              ENG=Date Filter] }
    { 5066;   ;Next To-do Date     ;Date          ;FieldClass=FlowField;
                                                   CalcFormula=Min(To-do.Date WHERE (Contact Company No.=FIELD(FILTER(Company No.)),
                                                                                     Contact No.=FIELD(FILTER(Lookup Contact No.)),
                                                                                     Closed=CONST(No),
                                                                                     System To-do Type=CONST(Contact Attendee)));
                                                   CaptionML=[ENU=Next To-do Date;
                                                              ENG=Next To-do Date];
                                                   Editable=No }
    { 5067;   ;Last Date Attempted ;Date          ;FieldClass=FlowField;
                                                   CalcFormula=Max("Interaction Log Entry".Date WHERE (Contact Company No.=FIELD(Company No.),
                                                                                                       Contact No.=FIELD(FILTER(Lookup Contact No.)),
                                                                                                       Initiated By=CONST(Us),
                                                                                                       Postponed=CONST(No)));
                                                   CaptionML=[ENU=Last Date Attempted;
                                                              ENG=Last Date Attempted];
                                                   Editable=No }
    { 5068;   ;Date of Last Interaction;Date      ;FieldClass=FlowField;
                                                   CalcFormula=Max("Interaction Log Entry".Date WHERE (Contact Company No.=FIELD(Company No.),
                                                                                                       Contact No.=FIELD(FILTER(Lookup Contact No.)),
                                                                                                       Attempt Failed=CONST(No),
                                                                                                       Postponed=CONST(No)));
                                                   CaptionML=[ENU=Date of Last Interaction;
                                                              ENG=Date of Last Interaction];
                                                   Editable=No }
    { 5069;   ;No. of Job Responsibilities;Integer;FieldClass=FlowField;
                                                   CalcFormula=Count("Contact Job Responsibility" WHERE (Contact No.=FIELD(No.)));
                                                   CaptionML=[ENU=No. of Job Responsibilities;
                                                              ENG=No. of Job Responsibilities];
                                                   Editable=No }
    { 5070;   ;No. of Industry Groups;Integer     ;FieldClass=FlowField;
                                                   CalcFormula=Count("Contact Industry Group" WHERE (Contact No.=FIELD(Company No.)));
                                                   CaptionML=[ENU=No. of Industry Groups;
                                                              ENG=No. of Industry Groups];
                                                   Editable=No }
    { 5071;   ;No. of Business Relations;Integer  ;FieldClass=FlowField;
                                                   CalcFormula=Count("Contact Business Relation" WHERE (Contact No.=FIELD(Company No.)));
                                                   CaptionML=[ENU=No. of Business Relations;
                                                              ENG=No. of Business Relations];
                                                   Editable=No }
    { 5072;   ;No. of Mailing Groups;Integer      ;FieldClass=FlowField;
                                                   CalcFormula=Count("Contact Mailing Group" WHERE (Contact No.=FIELD(No.)));
                                                   CaptionML=[ENU=No. of Mailing Groups;
                                                              ENG=No. of Mailing Groups];
                                                   Editable=No }
    { 5073;   ;External ID         ;Code20        ;CaptionML=[ENU=External ID;
                                                              ENG=External ID] }
    { 5074;   ;No. of Interactions ;Integer       ;FieldClass=FlowField;
                                                   CalcFormula=Count("Interaction Log Entry" WHERE (Contact Company No.=FIELD(FILTER(Company No.)),
                                                                                                    Canceled=CONST(No),
                                                                                                    Contact No.=FIELD(FILTER(Lookup Contact No.)),
                                                                                                    Date=FIELD(Date Filter),
                                                                                                    Postponed=CONST(No)));
                                                   CaptionML=[ENU=No. of Interactions;
                                                              ENG=No. of Interactions];
                                                   Editable=No }
    { 5076;   ;Cost (LCY)          ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Interaction Log Entry"."Cost (LCY)" WHERE (Contact Company No.=FIELD(Company No.),
                                                                                                               Canceled=CONST(No),
                                                                                                               Contact No.=FIELD(FILTER(Lookup Contact No.)),
                                                                                                               Date=FIELD(Date Filter),
                                                                                                               Postponed=CONST(No)));
                                                   CaptionML=[ENU=Cost (LCY);
                                                              ENG=Cost (LCY)];
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 5077;   ;Duration (Min.)     ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Interaction Log Entry"."Duration (Min.)" WHERE (Contact Company No.=FIELD(Company No.),
                                                                                                                    Canceled=CONST(No),
                                                                                                                    Contact No.=FIELD(FILTER(Lookup Contact No.)),
                                                                                                                    Date=FIELD(Date Filter),
                                                                                                                    Postponed=CONST(No)));
                                                   CaptionML=[ENU=Duration (Min.);
                                                              ENG=Duration (Min.)];
                                                   DecimalPlaces=0:0;
                                                   Editable=No }
    { 5078;   ;No. of Opportunities;Integer       ;FieldClass=FlowField;
                                                   CalcFormula=Count("Opportunity Entry" WHERE (Active=CONST(Yes),
                                                                                                Contact Company No.=FIELD(Company No.),
                                                                                                Estimated Close Date=FIELD(Date Filter),
                                                                                                Contact No.=FIELD(FILTER(Lookup Contact No.)),
                                                                                                Action Taken=FIELD(Action Taken Filter)));
                                                   CaptionML=[ENU=No. of Opportunities;
                                                              ENG=No. of Opportunities];
                                                   Editable=No }
    { 5079;   ;Estimated Value (LCY);Decimal      ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Opportunity Entry"."Estimated Value (LCY)" WHERE (Active=CONST(Yes),
                                                                                                                      Contact Company No.=FIELD(Company No.),
                                                                                                                      Estimated Close Date=FIELD(Date Filter),
                                                                                                                      Contact No.=FIELD(FILTER(Lookup Contact No.)),
                                                                                                                      Action Taken=FIELD(Action Taken Filter)));
                                                   CaptionML=[ENU=Estimated Value (LCY);
                                                              ENG=Estimated Value (LCY)];
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 5080;   ;Calcd. Current Value (LCY);Decimal ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Opportunity Entry"."Calcd. Current Value (LCY)" WHERE (Active=CONST(Yes),
                                                                                                                           Contact Company No.=FIELD(Company No.),
                                                                                                                           Estimated Close Date=FIELD(Date Filter),
                                                                                                                           Contact No.=FIELD(FILTER(Lookup Contact No.)),
                                                                                                                           Action Taken=FIELD(Action Taken Filter)));
                                                   CaptionML=[ENU=Calcd. Current Value (LCY);
                                                              ENG=Calcd. Current Value (LCY)];
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 5082;   ;Opportunity Entry Exists;Boolean   ;FieldClass=FlowField;
                                                   CalcFormula=Exist("Opportunity Entry" WHERE (Active=CONST(Yes),
                                                                                                Contact Company No.=FIELD(Company No.),
                                                                                                Contact No.=FIELD(FILTER(Lookup Contact No.)),
                                                                                                Sales Cycle Code=FIELD(Sales Cycle Filter),
                                                                                                Sales Cycle Stage=FIELD(Sales Cycle Stage Filter),
                                                                                                Salesperson Code=FIELD(Salesperson Filter),
                                                                                                Campaign No.=FIELD(Campaign Filter),
                                                                                                Action Taken=FIELD(Action Taken Filter),
                                                                                                Estimated Value (LCY)=FIELD(Estimated Value Filter),
                                                                                                Calcd. Current Value (LCY)=FIELD(Calcd. Current Value Filter),
                                                                                                Completed %=FIELD(Completed % Filter),
                                                                                                Chances of Success %=FIELD(Chances of Success % Filter),
                                                                                                Probability %=FIELD(Probability % Filter),
                                                                                                Estimated Close Date=FIELD(Date Filter),
                                                                                                Close Opportunity Code=FIELD(Close Opportunity Filter)));
                                                   CaptionML=[ENU=Opportunity Entry Exists;
                                                              ENG=Opportunity Entry Exists];
                                                   Editable=No }
    { 5083;   ;To-do Entry Exists  ;Boolean       ;FieldClass=FlowField;
                                                   CalcFormula=Exist(To-do WHERE (Contact Company No.=FIELD(Company No.),
                                                                                  Contact No.=FIELD(FILTER(Lookup Contact No.)),
                                                                                  Team Code=FIELD(Team Filter),
                                                                                  Salesperson Code=FIELD(Salesperson Filter),
                                                                                  Campaign No.=FIELD(Campaign Filter),
                                                                                  Date=FIELD(Date Filter),
                                                                                  Status=FIELD(To-do Status Filter),
                                                                                  Priority=FIELD(Priority Filter),
                                                                                  Closed=FIELD(To-do Closed Filter)));
                                                   CaptionML=[ENU=To-do Entry Exists;
                                                              ENG=To-do Entry Exists];
                                                   Editable=No }
    { 5084;   ;Salesperson Filter  ;Code10        ;FieldClass=FlowFilter;
                                                   TableRelation=Salesperson/Purchaser;
                                                   CaptionML=[ENU=Salesperson Filter;
                                                              ENG=Salesperson Filter] }
    { 5085;   ;Campaign Filter     ;Code20        ;FieldClass=FlowFilter;
                                                   TableRelation=Campaign;
                                                   CaptionML=[ENU=Campaign Filter;
                                                              ENG=Campaign Filter] }
    { 5087;   ;Action Taken Filter ;Option        ;FieldClass=FlowFilter;
                                                   CaptionML=[ENU=Action Taken Filter;
                                                              ENG=Action Taken Filter];
                                                   OptionCaptionML=[ENU=" ,Next,Previous,Updated,Jumped,Won,Lost";
                                                                    ENG=" ,Next,Previous,Updated,Jumped,Won,Lost"];
                                                   OptionString=[ ,Next,Previous,Updated,Jumped,Won,Lost] }
    { 5088;   ;Sales Cycle Filter  ;Code10        ;FieldClass=FlowFilter;
                                                   TableRelation="Sales Cycle";
                                                   CaptionML=[ENU=Sales Cycle Filter;
                                                              ENG=Sales Cycle Filter] }
    { 5089;   ;Sales Cycle Stage Filter;Integer   ;FieldClass=FlowFilter;
                                                   TableRelation="Sales Cycle Stage".Stage WHERE (Sales Cycle Code=FIELD(Sales Cycle Filter));
                                                   CaptionML=[ENU=Sales Cycle Stage Filter;
                                                              ENG=Sales Cycle Stage Filter] }
    { 5090;   ;Probability % Filter;Decimal       ;FieldClass=FlowFilter;
                                                   CaptionML=[ENU=Probability % Filter;
                                                              ENG=Probability % Filter];
                                                   DecimalPlaces=1:1;
                                                   MinValue=0;
                                                   MaxValue=100 }
    { 5091;   ;Completed % Filter  ;Decimal       ;FieldClass=FlowFilter;
                                                   CaptionML=[ENU=Completed % Filter;
                                                              ENG=Completed % Filter];
                                                   DecimalPlaces=1:1;
                                                   MinValue=0;
                                                   MaxValue=100 }
    { 5092;   ;Estimated Value Filter;Decimal     ;FieldClass=FlowFilter;
                                                   CaptionML=[ENU=Estimated Value Filter;
                                                              ENG=Estimated Value Filter];
                                                   AutoFormatType=1 }
    { 5093;   ;Calcd. Current Value Filter;Decimal;FieldClass=FlowFilter;
                                                   CaptionML=[ENU=Calcd. Current Value Filter;
                                                              ENG=Calcd. Current Value Filter];
                                                   AutoFormatType=1 }
    { 5094;   ;Chances of Success % Filter;Decimal;FieldClass=FlowFilter;
                                                   CaptionML=[ENU=Chances of Success % Filter;
                                                              ENG=Chances of Success % Filter];
                                                   DecimalPlaces=0:0;
                                                   MinValue=0;
                                                   MaxValue=100 }
    { 5095;   ;To-do Status Filter ;Option        ;FieldClass=FlowFilter;
                                                   CaptionML=[ENU=To-do Status Filter;
                                                              ENG=To-do Status Filter];
                                                   OptionCaptionML=[ENU=Not Started,In Progress,Completed,Waiting,Postponed;
                                                                    ENG=Not Started,In Progress,Completed,Waiting,Postponed];
                                                   OptionString=Not Started,In Progress,Completed,Waiting,Postponed }
    { 5096;   ;To-do Closed Filter ;Boolean       ;FieldClass=FlowFilter;
                                                   CaptionML=[ENU=To-do Closed Filter;
                                                              ENG=To-do Closed Filter] }
    { 5097;   ;Priority Filter     ;Option        ;FieldClass=FlowFilter;
                                                   CaptionML=[ENU=Priority Filter;
                                                              ENG=Priority Filter];
                                                   OptionCaptionML=[ENU=Low,Normal,High;
                                                                    ENG=Low,Normal,High];
                                                   OptionString=Low,Normal,High }
    { 5098;   ;Team Filter         ;Code10        ;FieldClass=FlowFilter;
                                                   TableRelation=Team;
                                                   CaptionML=[ENU=Team Filter;
                                                              ENG=Team Filter] }
    { 5099;   ;Close Opportunity Filter;Code10    ;FieldClass=FlowFilter;
                                                   TableRelation="Close Opportunity Code";
                                                   CaptionML=[ENU=Close Opportunity Filter;
                                                              ENG=Close Opportunity Filter] }
    { 5100;   ;Correspondence Type ;Option        ;CaptionML=[ENU=Correspondence Type;
                                                              ENG=Correspondence Type];
                                                   OptionCaptionML=[ENU=" ,Hard Copy,E-Mail,Fax";
                                                                    ENG=" ,Hard Copy,E-Mail,Fax"];
                                                   OptionString=[ ,Hard Copy,E-Mail,Fax] }
    { 5101;   ;Salutation Code     ;Code10        ;TableRelation=Salutation;
                                                   CaptionML=[ENU=Salutation Code;
                                                              ENG=Salutation Code] }
    { 5102;   ;Search E-Mail       ;Code80        ;CaptionML=[ENU=Search E-Mail;
                                                              ENG=Search E-Mail] }
    { 5104;   ;Last Time Modified  ;Time          ;CaptionML=[ENU=Last Time Modified;
                                                              ENG=Last Time Modified] }
    { 5105;   ;E-Mail 2            ;Text80        ;ExtendedDatatype=E-Mail;
                                                   CaptionML=[ENU=E-Mail 2;
                                                              ENG=E-Mail 2] }
    { 50000;  ;Transfer            ;Boolean        }
    { 50100;  ;First Invoice Date  ;Date          ;FieldClass=FlowField;
                                                   CalcFormula=Min("Sales Invoice Header"."Posting Date" WHERE (Sell-to Contact No.=FIELD(No.)));
                                                   CaptionML=[ENU=First Invoice Date;
                                                              ENG=First Invoice Date];
                                                   Description=OP11992;
                                                   Editable=No }
    { 50101;  ;Last Invoice Date   ;Date          ;FieldClass=FlowField;
                                                   CalcFormula=Max("Sales Invoice Header"."Posting Date" WHERE (Sell-to Contact No.=FIELD(No.),
                                                                                                                Location Code=CONST(MAIN)));
                                                   CaptionML=[ENU=Last Invoice Date;
                                                              ENG=Last Invoice Date];
                                                   Description=OP11992;
                                                   Editable=No }
    { 60700;  ;Enquiry Source      ;Code10        ;TableRelation="Enquiry Source" }
    { 60701;  ;Created By Web      ;Boolean       ;Description=SDL1.025 }
    { 60702;  ;Mailsort            ;Text5          }
    { 60703;No;Reward Points Allowed;Boolean       }
    { 60704;No;Reward Points       ;Decimal        }
    { 60706;  ;Customer Type       ;Code10        ;TableRelation="Customer Type";
                                                   OnValidate=VAR
                                                                ContBusRel@1000000001 : Record 5054;
                                                                Cust@1000000000 : Record 18;
                                                              BEGIN
                                                                //DOC OP10610 DD 26/10/2017 -
                                                                ContBusRel.RESET;
                                                                ContBusRel.SETCURRENTKEY("Link to Table","Contact No.");
                                                                ContBusRel.SETRANGE("Link to Table",ContBusRel."Link to Table"::Customer);
                                                                ContBusRel.SETRANGE("Contact No.","Company No.");
                                                                IF ContBusRel.FINDFIRST THEN BEGIN
                                                                  IF Cust.GET(ContBusRel."No.") THEN BEGIN
                                                                    IF Cust."Primary Contact No." = "No." THEN BEGIN
                                                                      IF (Cust."Customer Type" <> "Customer Type") THEN BEGIN
                                                                        Cust."Customer Type" := "Customer Type";
                                                                      END;
                                                                    END;
                                                                  END;
                                                                END;
                                                                //DOC OP10610 DD 26/10/2017 +
                                                              END;

                                                   Description=SDL1.000 }
    { 60710;  ;Default Dimension Code;Code20      ;OnValidate=BEGIN
                                                                CLEAR("Default Dimension Value");
                                                              END;
                                                               }
    { 60711;  ;Default Dimension Value;Code20     ;TableRelation="Dimension Value".Code WHERE (Dimension Code=FIELD(Default Dimension Code)) }
    { 60720;  ;Info By E-Mail      ;Boolean       ;OnValidate=VAR
                                                                IntegrtnManagement@1000000000 : Codeunit 60766;
                                                              BEGIN
                                                                "Info Preference, Last Update" := CURRENTDATETIME;

                                                                //DOC OP13472 JF 06/08/2018 -
                                                                //IF CONFIRM(Text50000, TRUE) THEN BEGIN
                                                                  CLEAR(IntegrtnManagement);
                                                                  IntegrtnManagement.UpdateContractOptIn(Rec)
                                                                //END;
                                                                //DOC OP13472 JF 06/08/2018 +
                                                              END;

                                                   Description=SDL1.034 }
    { 60721;  ;Info By Post        ;Boolean       ;OnValidate=BEGIN
                                                                "Info Preference, Last Update" := CURRENTDATETIME;
                                                              END;

                                                   Description=SDL1.034 }
    { 60722;  ;Info By Phone       ;Boolean       ;OnValidate=BEGIN
                                                                "Info Preference, Last Update" := CURRENTDATETIME;
                                                              END;

                                                   Description=SDL1.034 }
    { 60723;  ;Third Party Info    ;Boolean       ;Description=SDL1.034 }
    { 60724;  ;Salon               ;Boolean       ;Description=DTM1.000 }
    { 60725;  ;Business List Ref   ;Text30         }
    { 60726;  ;Cat. Req. Reminder  ;Integer        }
    { 60727;  ;Cat. Req. Reminder Date;Date        }
    { 60728;  ;Blocked Customer    ;Option        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Customer.Blocked WHERE (Primary Contact No.=FIELD(No.)));
                                                   OptionCaptionML=ENG=" ,Ship,Invoice,All";
                                                   OptionString=[ ,Ship,Invoice,All];
                                                   Description=SH FlowField from Customer }
    { 60740;  ;Special Instruction 1;Text25       ;TableRelation="Special Shipping Instruction".Instruction;
                                                   Description=SDL1.109 }
    { 60741;  ;Special Instruction 2;Text25       ;TableRelation="Special Shipping Instruction".Instruction;
                                                   Description=SDL1.109 }
    { 60742;  ;Residential Property;Boolean       ;Description=SDL1.109 }
    { 60743;  ;Email For Carrier Confirm;Text50   ;Description=SDL1.109 }
    { 60744;  ;Phone For Carrier Confirm;Text20   ;Description=SDL1.109 }
    { 60745;  ;Collection On Delivery;Boolean     ;Description=SDL1.109 }
    { 60746;  ;Date Created        ;DateTime      ;Editable=No }
    { 60747;  ;Created By          ;Code50        ;Editable=No }
    { 60748;  ;Business Code       ;Code10         }
    { 60749;  ;Business Name       ;Text50         }
    { 60750;  ;General Subscriptions;Boolean       }
    { 60760;  ;Info Preference, Last Update;DateTime;
                                                   Description=[ OP13346] }
    { 90000;  ;Marketing_Email     ;Text80         }
    { 90001;  ;Marketing_Post      ;Code50         }
    { 90002;  ;Marketing_Phone     ;Text30         }
    { 90003;  ;Technician/Therapist;Boolean        }
    { 90004;  ;Terms&Condition     ;Boolean        }
    { 90005;  ;Business_type       ;Text80         }
    { 90006;  ;Magento_Id          ;Code20         }
    { 90007;  ;Cantact update      ;Boolean        }
    { 90008;  ;Created Date        ;DateTime       }
  }
  KEYS
  {
    {    ;No.                                     ;Clustered=Yes }
    {    ;Search Name                              }
    {    ;Company Name,Company No.,Type,Name       }
    {    ;Company No.                              }
    {    ;Territory Code                           }
    {    ;Salesperson Code                         }
    {    ;VAT Registration No.                     }
    {    ;Search E-Mail                            }
    {    ;Name                                    ;KeyGroups=SearchCol }
    {    ;City                                    ;KeyGroups=SearchCol }
    {    ;Post Code                               ;KeyGroups=SearchCol }
    {    ;Phone No.                               ;KeyGroups=SearchCol }
    {    ;Type,Transfer                            }
  }
  FIELDGROUPS
  {
    { 1   ;DropDown            ;No.,Name,Type,City,Post Code,Phone No.   }
  }
  CODE
  {
    VAR
      Text000@1000 : TextConst 'ENU=You cannot delete the %2 record of the %1 because there are one or more to-dos open.;ENG=You cannot delete the %2 record of the %1 because there are one or more to-dos open.';
      Text001@1001 : TextConst 'ENU=You cannot delete the %2 record of the %1 because the contact is assigned one or more unlogged segments.;ENG=You cannot delete the %2 record of the %1 because the contact is assigned one or more unlogged segments.';
      Text002@1002 : TextConst 'ENU=You cannot delete the %2 record of the %1 because one or more opportunities are in not started or progress.;ENG=You cannot delete the %2 record of the %1 because one or more opportunities are in not started or progress.';
      Text003@1003 : TextConst 'ENU=%1 cannot be changed because one or more interaction log entries are linked to the contact.;ENG=%1 cannot be changed because one or more interaction log entries are linked to the contact.';
      Text005@1005 : TextConst 'ENU=%1 cannot be changed because one or more to-dos are linked to the contact.;ENG=%1 cannot be changed because one or more to-dos are linked to the contact.';
      Text006@1006 : TextConst 'ENU=%1 cannot be changed because one or more opportunities are linked to the contact.;ENG=%1 cannot be changed because one or more opportunities are linked to the contact.';
      Text007@1007 : TextConst 'ENU=%1 cannot be changed because there are one or more related people linked to the contact.;ENG=%1 cannot be changed because there are one or more related people linked to the contact.';
      Text009@1009 : TextConst 'ENU=The %2 record of the %1 has been created.;ENG=The %2 record of the %1 has been created.';
      Text010@1010 : TextConst 'ENU=The %2 record of the %1 is not linked with any other table.;ENG=The %2 record of the %1 is not linked with any other table.';
      RMSetup@1012 : Record 5079;
      Cont@1013 : Record 5050;
      ContBusRel@1014 : Record 5054;
      PostCode@1011 : Record 225;
      DuplMgt@1015 : Codeunit 5060;
      NoSeriesMgt@1016 : Codeunit 396;
      UpdateCustVendBank@1017 : Codeunit 5055;
      CampaignMgt@1050 : Codeunit 7030;
      ContChanged@1018 : Boolean;
      SkipDefaults@1019 : Boolean;
      Text012@1020 : TextConst 'ENU=You cannot change %1 because one or more unlogged segments are assigned to the contact.;ENG=You cannot change %1 because one or more unlogged segments are assigned to the contact.';
      Text019@1022 : TextConst 'ENU=The %2 record of the %1 already has the %3 with %4 %5.;ENG=The %2 record of the %1 already has the %3 with %4 %5.';
      Text020@1021 : TextConst 'ENU=Do you want to create a contact %1 %2 as a customer using a customer template?;ENG=Do you want to create a contact %1 %2 as a customer using a customer template?';
      Text021@1023 : TextConst 'ENU=You have to set up formal and informal salutation formulas in %1  language for the %2 contact.;ENG=You have to set up formal and informal salutation formulas in %1  language for the %2 contact.';
      HideValidationDialog@1032 : Boolean;
      Text022@1034 : TextConst 'ENU=The creation of the customer has been aborted.;ENG=The creation of the customer has been aborted.';
      Text029@1045 : TextConst 'ENU=The total length of first name, middle name and surname is %1 character(s)longer than the maximum length allowed for the Name field.;ENG=The total length of first name, middle name and surname is %1 character(s)longer than the maximum length allowed for the Name field.';
      Text032@1048 : TextConst 'ENU=The length of %1 is %2 character(s)longer than the maximum length allowed for the %1 field.;ENG=The length of %1 is %2 character(s)longer than the maximum length allowed for the %1 field.';
      Text033@1008 : TextConst 'ENU=Before you can use Online Map, you must fill in the Online Map Setup window.\See Setting Up Online Map in Help.;ENG=Before you can use Online Map, you must fill in the Online Map Setup window.\See Setting Up Online Map in Help.';
      Text60700@1040000 : TextConst 'ENU=Address Search unsuccessful.\\Do you wish to keep the new %1?;ENG=Address Search unsuccessful.\\Do you wish to keep the new %1?';
      RecCust@1000000000 : Record 18;
      Text50000@1000000001 : TextConst 'ENU=Do you want to synchronize the Opt-In option with Emarsys?;ENG=Do you want to synchronize the Opt-In option with Emarsys?';

    PROCEDURE OnModify@4(xRec@1005 : Record 5050);
    VAR
      OldCont@1001 : Record 5050;
    BEGIN
      "Last Date Modified" := TODAY;
      "Last Time Modified" := TIME;

      IF Type = Type::Company THEN BEGIN
        IF (Name <> xRec.Name) OR
           ("Search Name" <> xRec."Search Name") OR
           ("Name 2" <> xRec."Name 2") OR
           (Address <> xRec.Address) OR
           ("Address 2" <> xRec."Address 2") OR
           (City <> xRec.City) OR
           ("Phone No." <> xRec."Phone No.") OR
           ("Telex No." <> xRec."Telex No.") OR
           ("Territory Code" <> xRec."Territory Code") OR
           ("Currency Code" <> xRec."Currency Code") OR
           ("Language Code" <> xRec."Language Code") OR
           ("Salesperson Code" <> xRec."Salesperson Code") OR
           ("Country/Region Code" <> xRec."Country/Region Code") OR
           ("Fax No." <> xRec."Fax No.") OR
           ("Telex Answer Back" <> xRec."Telex Answer Back") OR
           ("VAT Registration No." <> xRec."VAT Registration No.") OR
           ("Post Code" <> xRec."Post Code") OR
           (County <> xRec.County) OR
           ("E-Mail" <> xRec."E-Mail") OR
           ("Home Page" <> xRec."Home Page")
        THEN
          UpdateCustVendBank.RUN(Rec);

        RMSetup.GET;
        Cont.RESET;
        Cont.SETCURRENTKEY("Company No.");
        Cont.SETRANGE("Company No.","No.");
        Cont.SETRANGE(Type,Type::Person);
        IF Cont.FIND('-') THEN
          REPEAT
            ContChanged := FALSE;
            OldCont := Cont;
            IF Name <> xRec.Name THEN BEGIN
              Cont."Company Name" := Name;
              ContChanged := TRUE;
            END;
            IF RMSetup."Inherit Salesperson Code" AND
               (xRec."Salesperson Code" <> "Salesperson Code") AND
               (xRec."Salesperson Code" = Cont."Salesperson Code")
            THEN BEGIN
              Cont."Salesperson Code" := "Salesperson Code";
              ContChanged := TRUE;
            END;
            IF RMSetup."Inherit Territory Code" AND
               (xRec."Territory Code" <> "Territory Code") AND
               (xRec."Territory Code" = Cont."Territory Code")
            THEN BEGIN
              Cont."Territory Code" := "Territory Code";
              ContChanged := TRUE;
            END;
            IF RMSetup."Inherit Country/Region Code" AND
               (xRec."Country/Region Code" <> "Country/Region Code") AND
               (xRec."Country/Region Code" = Cont."Country/Region Code")
            THEN BEGIN
              Cont."Country/Region Code" := "Country/Region Code";
              ContChanged := TRUE;
            END;
            IF RMSetup."Inherit Language Code" AND
               (xRec."Language Code" <> "Language Code") AND
               (xRec."Language Code" = Cont."Language Code")
            THEN BEGIN
              Cont."Language Code" := "Language Code";
              ContChanged := TRUE;
            END;
            IF RMSetup."Inherit Address Details" THEN BEGIN
              IF xRec.IdenticalAddress(Cont) THEN BEGIN
                IF xRec.Address <> Address THEN BEGIN
                  Cont.Address := Address;
                  ContChanged := TRUE;
                END;
                IF xRec."Address 2" <> "Address 2" THEN BEGIN
                  Cont."Address 2" := "Address 2";
                  ContChanged := TRUE;
                END;
                IF xRec."Post Code" <> "Post Code" THEN BEGIN
                  Cont."Post Code" := "Post Code";
                  ContChanged := TRUE;
                END;
                IF xRec.City <> City THEN BEGIN
                  Cont.City := City;
                  ContChanged := TRUE;
                END;
                IF xRec.County <> County THEN BEGIN
                  Cont.County := County;
                  ContChanged := TRUE;
                END;
              END;
            END;
            IF RMSetup."Inherit Communication Details" THEN BEGIN
              IF (xRec."Phone No." <> "Phone No.") AND (xRec."Phone No." = Cont."Phone No.") THEN BEGIN
                Cont."Phone No." := "Phone No.";
                ContChanged := TRUE;
              END;
              IF (xRec."Telex No." <> "Telex No.") AND (xRec."Telex No." = Cont."Telex No.") THEN BEGIN
                Cont."Telex No." := "Telex No.";
                ContChanged := TRUE;
              END;
              IF (xRec."Fax No." <> "Fax No.") AND (xRec."Fax No." = Cont."Fax No.") THEN BEGIN
                Cont."Fax No." := "Fax No.";
                ContChanged := TRUE;
              END;
              IF (xRec."Telex Answer Back" <> "Telex Answer Back") AND (xRec."Telex Answer Back" = Cont."Telex Answer Back") THEN BEGIN
                Cont."Telex Answer Back" := "Telex Answer Back";
                ContChanged := TRUE;
              END;
              IF (xRec."E-Mail" <> "E-Mail") AND (xRec."E-Mail" = Cont."E-Mail") THEN BEGIN
                Cont.VALIDATE("E-Mail","E-Mail");
                ContChanged := TRUE;
              END;
              IF (xRec."Home Page" <> "Home Page") AND (xRec."Home Page" = Cont."Home Page") THEN BEGIN
                Cont."Home Page" := "Home Page";
                ContChanged := TRUE;
              END;
              IF (xRec."Extension No." <> "Extension No.") AND (xRec."Extension No." = Cont."Extension No.") THEN BEGIN
                Cont."Extension No." := "Extension No.";
                ContChanged := TRUE;
              END;
              IF (xRec."Mobile Phone No." <> "Mobile Phone No.") AND (xRec."Mobile Phone No." = Cont."Mobile Phone No.") THEN BEGIN
                Cont."Mobile Phone No." := "Mobile Phone No.";
                ContChanged := TRUE;
              END;
              IF (xRec.Pager <> Pager) AND (xRec.Pager = Cont.Pager) THEN BEGIN
                Cont.Pager := Pager;
                ContChanged := TRUE;
              END;
            END;
            IF ContChanged THEN BEGIN
              Cont.OnModify(OldCont);
              Cont.MODIFY;
            END;
          UNTIL Cont.NEXT = 0;

        IF (Name <> xRec.Name) OR
           ("Name 2" <> xRec."Name 2") OR
           (Address <> xRec.Address) OR
           ("Address 2" <> xRec."Address 2") OR
           (City <> xRec.City) OR
           ("Post Code" <> xRec."Post Code") OR
           ("VAT Registration No." <> xRec."VAT Registration No.") OR
           ("Phone No." <> xRec."Phone No.")
        THEN
          CheckDupl;
      END;
    END;

    PROCEDURE TypeChange@1();
    VAR
      InteractLogEntry@1000 : Record 5065;
      Opp@1001 : Record 5092;
      Todo@1002 : Record 5080;
      CampaignTargetGrMgt@1003 : Codeunit 7030;
    BEGIN
      RMSetup.GET;

      InteractLogEntry.LOCKTABLE;
      Todo.LOCKTABLE;
      Opp.LOCKTABLE;
      Cont.LOCKTABLE;
      InteractLogEntry.SETCURRENTKEY("Contact Company No.","Contact No.");
      InteractLogEntry.SETRANGE("Contact Company No.","Company No.");
      InteractLogEntry.SETRANGE("Contact No.","No.");
      IF InteractLogEntry.FINDFIRST THEN
        ERROR(Text003,FIELDCAPTION(Type));
      Todo.SETCURRENTKEY("Contact Company No.","Contact No.");
      Todo.SETRANGE("Contact Company No.","Company No.");
      Todo.SETRANGE("Contact No.","No.");
      IF Todo.FINDFIRST THEN
        ERROR(Text005,FIELDCAPTION(Type));
      Opp.SETCURRENTKEY("Contact Company No.","Contact No.");
      Opp.SETRANGE("Contact Company No.","Company No.");
      Opp.SETRANGE("Contact No.","No.");
      IF Opp.FINDFIRST THEN
        ERROR(Text006,FIELDCAPTION(Type));

      CASE Type OF
        Type::Company:
          BEGIN
            IF Type <> xRec.Type THEN BEGIN
              TESTFIELD("Organizational Level Code",'');
              TESTFIELD("No. of Job Responsibilities",0);
            END;
            "First Name" := '';
            "Middle Name" := '';
            Surname := '';
            "Job Title" := '';
            "Company No." := "No.";
            "Company Name" := Name;
            "Salutation Code" := RMSetup."Def. Company Salutation Code";
          END;
        Type::Person:
          BEGIN
            CampaignTargetGrMgt.DeleteContfromTargetGr(InteractLogEntry);
            Cont.RESET;
            Cont.SETCURRENTKEY("Company No.");
            Cont.SETRANGE("Company No.","No.");
            Cont.SETRANGE(Type,Type::Person);
            IF Cont.FIND('-') THEN
              ERROR(Text007,FIELDCAPTION(Type));
            IF Type <> xRec.Type THEN BEGIN
              TESTFIELD("No. of Business Relations",0);
              TESTFIELD("No. of Industry Groups",0);
              TESTFIELD("Currency Code",'');
              TESTFIELD("VAT Registration No.",'');
            END;
            IF "Company No." = "No." THEN BEGIN
              "Company No." := '';
              "Company Name" := '';
              "Salutation Code" := RMSetup."Default Person Salutation Code";
              NameBreakdown;
            END;
          END;
      END;
      VALIDATE("Lookup Contact No.");

      IF Cont.GET("No.") THEN BEGIN
        IF Type = Type::Company THEN
          CheckDupl
        ELSE
          DuplMgt.RemoveContIndex(Rec,FALSE);
      END;
    END;

    PROCEDURE AssistEdit@2(OldCont@1000 : Record 5050) : Boolean;
    BEGIN
      WITH Cont DO BEGIN
        Cont := Rec;
        RMSetup.GET;
        RMSetup.TESTFIELD("Contact Nos.");
        IF NoSeriesMgt.SelectSeries(RMSetup."Contact Nos.",OldCont."No. Series","No. Series") THEN BEGIN
          RMSetup.GET;
          RMSetup.TESTFIELD("Contact Nos.");
          NoSeriesMgt.SetSeries("No.");
          Rec := Cont;
          EXIT(TRUE);
        END;
      END;
    END;

    PROCEDURE CreateCustomer@3(CustomerTemplate@1006 : Code[10]);
    VAR
      Cust@1000 : Record 18;
      ContComp@1001 : Record 5050;
      CustTemplate@1003 : Record 5105;
      DefaultDim@1005 : Record 352;
      DefaultDim2@1004 : Record 352;
    BEGIN
      TESTFIELD("Company No.");
      RMSetup.GET;
      RMSetup.TESTFIELD("Bus. Rel. Code for Customers");

      ContBusRel.RESET;
      ContBusRel.SETRANGE("Contact No.","No.");
      ContBusRel.SETRANGE("Link to Table",ContBusRel."Link to Table"::Customer);
      IF ContBusRel.FINDFIRST THEN
        ERROR(
          Text019,
          TABLECAPTION,"No.",ContBusRel.TABLECAPTION,ContBusRel."Link to Table",ContBusRel."No.");

      IF CustomerTemplate <> '' THEN
        CustTemplate.GET(CustomerTemplate);

      CLEAR(Cust);
      Cust.SetInsertFromContact(TRUE);
      Cust.INSERT(TRUE);
      Cust.SetInsertFromContact(FALSE);

      IF Type = Type::Company THEN
        ContComp := Rec
      ELSE
        ContComp.GET("Company No.");

      ContBusRel."Contact No." := ContComp."No.";
      ContBusRel."Business Relation Code" := RMSetup."Bus. Rel. Code for Customers";
      ContBusRel."Link to Table" := ContBusRel."Link to Table"::Customer;
      ContBusRel."No." := Cust."No.";
      ContBusRel.INSERT(TRUE);

      UpdateCustVendBank.UpdateCustomer(ContComp,ContBusRel);

      Cust.GET(ContBusRel."No.");
      //SDL1.063 START
      //Cust.VALIDATE(Name,"Company Name");
      IF "Company Name" <> '' THEN
        Cust.VALIDATE(Name,"Company Name")
      ELSE
        Cust.VALIDATE(Name,Name);
      //SDL1.063 FINISH

      Cust.VALIDATE("Customer Type","Customer Type");  //SDL1.000 - DJR

      // SDL1.109 - START
      Cust."Special Instruction 1" := "Special Instruction 1";
      Cust."Special Instruction 2" := "Special Instruction 2";
      Cust."Residential Property" := "Residential Property";
      Cust."Email For Carrier Confirm" := "Email For Carrier Confirm";
      Cust."Phone For Carrier Confirm" := "Phone For Carrier Confirm";
      Cust."Collection On Delivery" := "Collection On Delivery";
      // SDL1.109 - FINISH

      //DOC OP10610 DS 15/09/2017 -
      Cust."Mobile No" := "Mobile Phone No.";
      Cust.Contact := Name;
      //DOC OP10610 DS 15/09/2017 +

      Cust.MODIFY;

      IF CustTemplate.Code <> '' THEN BEGIN
        Cust."Territory Code" := "Territory Code";
        Cust."Currency Code" := ContComp."Currency Code";
        Cust."Country/Region Code" := "Country/Region Code";
        Cust."Customer Posting Group" := CustTemplate."Customer Posting Group";
        Cust."Customer Price Group" := CustTemplate."Customer Price Group";
        Cust."Invoice Disc. Code" := CustTemplate."Invoice Disc. Code";
        Cust."Customer Disc. Group" := CustTemplate."Customer Disc. Group";
        Cust."Allow Line Disc." := CustTemplate."Allow Line Disc.";
        Cust."Gen. Bus. Posting Group" := CustTemplate."Gen. Bus. Posting Group";
        Cust."VAT Bus. Posting Group" := CustTemplate."VAT Bus. Posting Group";
        Cust."Payment Terms Code" := CustTemplate."Payment Terms Code";
        Cust."Payment Method Code" := CustTemplate."Payment Method Code";
        Cust."Shipment Method Code" := CustTemplate."Shipment Method Code";

        // SDL1.090 - START
        Cust."Shipping Advice" := CustTemplate."Shipping Advice";
        Cust."Shipping Agent Code" := CustTemplate."Shipping Agent Code";
        Cust."Shipping Agent Service Code" := CustTemplate."Shipping Agent Service Code";
        // SDL1.090 - FINISH

        Cust.MODIFY;

        DefaultDim.SETRANGE("Table ID",DATABASE::"Customer Template");
        DefaultDim.SETRANGE("No.",CustTemplate.Code);
        IF DefaultDim.FIND('-') THEN
          REPEAT
            CLEAR(DefaultDim2);
            DefaultDim2.INIT;
            DefaultDim2.VALIDATE("Table ID",DATABASE::Customer);
            DefaultDim2."No." := Cust."No.";
            DefaultDim2.VALIDATE("Dimension Code",DefaultDim."Dimension Code");
            DefaultDim2.VALIDATE("Dimension Value Code",DefaultDim."Dimension Value Code");
            DefaultDim2."Value Posting" := DefaultDim."Value Posting";
            DefaultDim2.INSERT(TRUE);
          UNTIL DefaultDim.NEXT = 0;

      END;

      // SDL048 ARI 16/12/2008 start
      DefaultDim.RESET;
      DefaultDim.SETRANGE("Table ID", DATABASE::"Customer Price Group");
      DefaultDim.SETRANGE("No.", Cust."No.");
      DefaultDim.SETRANGE("Dimension Code", "Default Dimension Code");
      IF NOT DefaultDim.FIND('-') THEN BEGIN
        DefaultDim.INIT;
        DefaultDim."Table ID" := DATABASE::Customer;
        DefaultDim."No." := Cust."No.";
        DefaultDim."Dimension Code" := "Default Dimension Code";
        DefaultDim.INSERT(TRUE);
      END;
      DefaultDim.VALIDATE("Dimension Value Code", "Default Dimension Value");
      DefaultDim.MODIFY(TRUE);
      // SDL048 ARI 16/12/2008 finish

      UpdateQuotes(Cust);
      CampaignMgt.ConverttoCustomer(Rec,Cust);

      // SDL007 - START - Validate Territory
      Cust.VALIDATE("Territory Code");

      // SDL2.013 START
      Cust."Created By" := USERID;
      Cust."Date Created" := CURRENTDATETIME;
      // SDL2.013 END
      Cust.MODIFY;
      // SDL007 - END - Validate Territory

      MESSAGE(Text009, Cust.TABLECAPTION, Cust."No.");
    END;

    PROCEDURE CreateVendor@7();
    VAR
      Vend@1000 : Record 23;
      ContComp@1001 : Record 5050;
    BEGIN
      TESTFIELD("Company No.");
      RMSetup.GET;
      RMSetup.TESTFIELD("Bus. Rel. Code for Vendors");

      CLEAR(Vend);
      Vend.SetInsertFromContact(TRUE);
      Vend.INSERT(TRUE);
      Vend.SetInsertFromContact(FALSE);

      IF Type = Type::Company THEN
        ContComp := Rec
      ELSE
        ContComp.GET("Company No.");

      ContBusRel."Contact No." := ContComp."No.";
      ContBusRel."Business Relation Code" := RMSetup."Bus. Rel. Code for Vendors";
      ContBusRel."Link to Table" := ContBusRel."Link to Table"::Vendor;
      ContBusRel."No." := Vend."No.";
      ContBusRel.INSERT(TRUE);

      UpdateCustVendBank.UpdateVendor(ContComp,ContBusRel);
      // SDL2.013 START
      Vend."Created By" := USERID;
      Vend."Date Created" := CURRENTDATETIME;
      // SDL2.013 END
      Vend.MODIFY;

      MESSAGE(Text009,Vend.TABLECAPTION,Vend."No.");
    END;

    PROCEDURE CreateBankAccount@8();
    VAR
      BankAcc@1000 : Record 270;
      ContComp@1001 : Record 5050;
    BEGIN
      TESTFIELD("Company No.");
      RMSetup.GET;
      RMSetup.TESTFIELD("Bus. Rel. Code for Bank Accs.");

      CLEAR(BankAcc);
      BankAcc.SetInsertFromContact(TRUE);
      BankAcc.INSERT(TRUE);
      BankAcc.SetInsertFromContact(FALSE);

      IF Type = Type::Company THEN
        ContComp := Rec
      ELSE
        ContComp.GET("Company No.");

      ContBusRel."Contact No." := ContComp."No.";
      ContBusRel."Business Relation Code" := RMSetup."Bus. Rel. Code for Bank Accs.";
      ContBusRel."Link to Table" := ContBusRel."Link to Table"::"Bank Account";
      ContBusRel."No." := BankAcc."No.";
      ContBusRel.INSERT(TRUE);

      UpdateCustVendBank.UpdateBankAccount(ContComp,ContBusRel);

      MESSAGE(Text009,BankAcc.TABLECAPTION,BankAcc."No.");
    END;

    PROCEDURE CreateCustomerLink@5();
    VAR
      Cust@1001 : Record 18;
      ContBusRel@1000 : Record 5054;
    BEGIN
      TESTFIELD("Company No.");
      RMSetup.GET;
      RMSetup.TESTFIELD("Bus. Rel. Code for Customers");
      CreateLink(
        PAGE::"Customer Link",
        RMSetup."Bus. Rel. Code for Customers",
        ContBusRel."Link to Table"::Customer);

      ContBusRel.SETCURRENTKEY("Link to Table","No.");
      ContBusRel.SETRANGE("Link to Table",ContBusRel."Link to Table"::Customer);
      ContBusRel.SETRANGE("Contact No.","Company No.");
      IF ContBusRel.FINDFIRST THEN
        IF Cust.GET(ContBusRel."No.") THEN
          UpdateQuotes(Cust);
    END;

    PROCEDURE CreateVendorLink@6();
    BEGIN
      TESTFIELD("Company No.");
      RMSetup.GET;
      RMSetup.TESTFIELD("Bus. Rel. Code for Vendors");
      CreateLink(
        PAGE::"Vendor Link",
        RMSetup."Bus. Rel. Code for Vendors",
        ContBusRel."Link to Table"::Vendor);
    END;

    PROCEDURE CreateBankAccountLink@9();
    BEGIN
      TESTFIELD("Company No.");
      RMSetup.GET;
      RMSetup.TESTFIELD("Bus. Rel. Code for Bank Accs.");
      CreateLink(
        PAGE::"Bank Account Link",
        RMSetup."Bus. Rel. Code for Bank Accs.",
        ContBusRel."Link to Table"::"Bank Account");
    END;

    PROCEDURE CreateLink@11(CreateForm@1000 : Integer;BusRelCode@1001 : Code[10];Table@1002 : 'Customer,Vendor,Bank Account');
    VAR
      TempContBusRel@1003 : TEMPORARY Record 5054;
    BEGIN
      TempContBusRel."Contact No." := "Company No.";
      TempContBusRel."Business Relation Code" := BusRelCode;
      TempContBusRel."Link to Table" := Table;
      TempContBusRel.INSERT;
      PAGE.RUNMODAL(CreateForm,TempContBusRel);
      TempContBusRel.DELETEALL;
    END;

    PROCEDURE CreateInteraction@10();
    VAR
      SegmentLine@1000 : TEMPORARY Record 5077;
    BEGIN
      SegmentLine.CreateInteractionFromContact(Rec);
    END;

    PROCEDURE ShowCustVendBank@12();
    VAR
      ContBusRel@1000 : Record 5054;
      FormSelected@1001 : Boolean;
      Cust@1002 : Record 18;
      Vend@1003 : Record 23;
      BankAcc@1004 : Record 270;
    BEGIN
      FormSelected := TRUE;

      ContBusRel.RESET;
      ContBusRel.SETRANGE("Contact No.","Company No.");
      ContBusRel.SETFILTER("No.",'<>''''');

      CASE ContBusRel.COUNT OF
        0:
          ERROR(Text010,TABLECAPTION,"No.");
        1:
          ContBusRel.FINDFIRST;
        ELSE
          FormSelected := PAGE.RUNMODAL(PAGE::"Contact Business Relations",ContBusRel) = ACTION::LookupOK;
      END;

      IF FormSelected THEN
        CASE ContBusRel."Link to Table" OF
          ContBusRel."Link to Table"::Customer:
            BEGIN
              Cust.GET(ContBusRel."No.");
              PAGE.RUN(PAGE::"Customer Card",Cust);
            END;
          ContBusRel."Link to Table"::Vendor:
            BEGIN
              Vend.GET(ContBusRel."No.");
              PAGE.RUN(PAGE::"Vendor Card",Vend);
            END;
          ContBusRel."Link to Table"::"Bank Account":
            BEGIN
              BankAcc.GET(ContBusRel."No.");
              PAGE.RUN(PAGE::"Bank Account Card",BankAcc);
            END;
        END;
    END;

    PROCEDURE NameBreakdown@13();
    VAR
      NamePart@1000 : ARRAY [30] OF Text[250];
      TempName@1001 : Text[250];
      FirstName250@1004 : Text[250];
      i@1002 : Integer;
      NoOfParts@1003 : Integer;
    BEGIN
      IF Type = Type::Company THEN
        EXIT;

      TempName := Name;
      WHILE STRPOS(TempName,' ') > 0 DO BEGIN
        IF STRPOS(TempName,' ') > 1 THEN BEGIN
          i := i + 1;
          NamePart[i] := COPYSTR(TempName,1,STRPOS(TempName,' ') - 1);
        END;
        TempName := COPYSTR(TempName,STRPOS(TempName,' ') + 1);
      END;
      i := i + 1;
      NamePart[i] := TempName;
      NoOfParts := i;

      "First Name" := '';
      "Middle Name" := '';
      Surname := '';
      FOR i := 1 TO NoOfParts DO BEGIN
        IF (i = NoOfParts) AND (NoOfParts > 1) THEN BEGIN
          IF STRLEN(NamePart[i]) > MAXSTRLEN(Surname) THEN
            ERROR(Text032,FIELDCAPTION(Surname),STRLEN(NamePart[i]) - MAXSTRLEN(Surname));
          Surname := NamePart[i]
        END ELSE
          IF (i = NoOfParts - 1) AND (NoOfParts > 2) THEN BEGIN
            IF STRLEN(NamePart[i]) > MAXSTRLEN("Middle Name") THEN
              ERROR(Text032,FIELDCAPTION("Middle Name"),STRLEN(NamePart[i]) - MAXSTRLEN("Middle Name"));
            "Middle Name" := NamePart[i]
          END ELSE BEGIN
            FirstName250 := DELCHR("First Name" + ' ' + NamePart[i],'<',' ');
            IF STRLEN(FirstName250) > MAXSTRLEN("First Name") THEN
              ERROR(Text032,FIELDCAPTION("First Name"),STRLEN(FirstName250) - MAXSTRLEN("First Name"));
            "First Name" := FirstName250;
          END;
      END;
    END;

    PROCEDURE SetSkipDefault@15(Defaults@1000 : Boolean);
    BEGIN
      SkipDefaults := NOT Defaults;
    END;

    PROCEDURE IdenticalAddress@16(VAR Cont@1000 : Record 5050) : Boolean;
    BEGIN
      EXIT(
        (Address = Cont.Address) AND
        ("Address 2" = Cont."Address 2") AND
        ("Post Code" = Cont."Post Code") AND
        (City = Cont.City))
    END;

    PROCEDURE ActiveAltAddress@17(ActiveDate@1000 : Date) : Code[10];
    VAR
      ContAltAddrDateRange@1001 : Record 5052;
    BEGIN
      ContAltAddrDateRange.SETCURRENTKEY("Contact No.","Starting Date");
      ContAltAddrDateRange.SETRANGE("Contact No.","No.");
      ContAltAddrDateRange.SETRANGE("Starting Date",0D,ActiveDate);
      ContAltAddrDateRange.SETFILTER("Ending Date",'>=%1|%2',ActiveDate,0D);
      IF ContAltAddrDateRange.FINDLAST THEN
        EXIT(ContAltAddrDateRange."Contact Alt. Address Code");

      EXIT('');
    END;

    PROCEDURE CalculatedName@14() NewName@1000 : Text[50];
    VAR
      NewName92@1001 : Text[92];
    BEGIN
      IF "First Name" <> '' THEN
        NewName92 := "First Name";
      IF "Middle Name" <> '' THEN
        NewName92 := NewName92 + ' ' + "Middle Name";
      IF Surname <> '' THEN
        NewName92 := NewName92 + ' ' + Surname;

      NewName92 := DELCHR(NewName92,'<',' ');

      IF STRLEN(NewName92) > MAXSTRLEN(Name) THEN
        ERROR(Text029,STRLEN(NewName92) - MAXSTRLEN(Name));

      NewName := COPYSTR(NewName92,1,STRLEN(NewName92));
    END;

    PROCEDURE UpdateSearchName@22();
    BEGIN
      IF ("Search Name" = UPPERCASE(xRec.Name)) OR ("Search Name" = '') THEN
        "Search Name" := Name;
    END;

    PROCEDURE AddText@20(Text@1000 : Text[249]) : Text[250];
    BEGIN
      IF Text <> '' THEN
        EXIT(Text + ' ');
    END;

    PROCEDURE CheckDupl@21();
    BEGIN
      IF RMSetup."Maintain Dupl. Search Strings" THEN
        DuplMgt.MakeContIndex(Rec);
      IF GUIALLOWED THEN
        IF DuplMgt.DuplicateExist(Rec) THEN BEGIN
          MODIFY;
          COMMIT;
          DuplMgt.LaunchDuplicateForm(Rec);
        END;
    END;

    PROCEDURE FindCustomerTemplate@23() FindCustTemplate@1001 : Code[10];
    VAR
      CustTemplate@1003 : Record 5105;
      ContCompany@1002 : Record 5050;
    BEGIN
      CustTemplate.RESET;
      CustTemplate.SETRANGE("Territory Code","Territory Code");
      CustTemplate.SETRANGE("Country/Region Code","Country/Region Code");
      IF ContCompany.GET("Company No.") THEN
        CustTemplate.SETRANGE("Currency Code",ContCompany."Currency Code");

      IF CustTemplate.COUNT = 1 THEN BEGIN
        CustTemplate.FINDFIRST;
        EXIT(CustTemplate.Code);
      END;
    END;

    PROCEDURE ChooseCustomerTemplate@27() ChooseCustTemplate@1001 : Code[10];
    VAR
      CustTemplate@1000 : Record 5105;
      Territory@1040000 : Record 286;
    BEGIN
      ContBusRel.RESET;
      ContBusRel.SETRANGE("Contact No.","No.");
      ContBusRel.SETRANGE("Link to Table",ContBusRel."Link to Table"::Customer);
      IF ContBusRel.FINDFIRST THEN
        ERROR(
          Text019,
          TABLECAPTION,"No.",ContBusRel.TABLECAPTION,ContBusRel."Link to Table",ContBusRel."No.");

      // ------ SDL1.000
      {
      IF CONFIRM(Text020,TRUE,"No.",Name) THEN BEGIN
        IF PAGE.RUNMODAL(0,CustTemplate) = ACTION::LookupOK THEN
          EXIT(CustTemplate.Code);

        ERROR(Text022);
      }
      BEGIN
        TESTFIELD("Territory Code");
        Territory.GET("Territory Code");
        Territory.TESTFIELD("Customer Template Code");
        EXIT(Territory."Customer Template Code");
      END;
      //END;
      // ------ SDL1.000
    END;

    PROCEDURE UpdateQuotes@29(Customer@1000 : Record 18);
    VAR
      SalesHeader@1003 : Record 36;
      Cont@1004 : Record 5050;
      SalesLine@1001 : Record 37;
    BEGIN
      Cont.SETCURRENTKEY("Company No.");
      Cont.SETRANGE("Company No.","Company No.");

      IF Cont.FIND('-') THEN
        REPEAT
          SalesHeader.RESET;
          SalesHeader.SETCURRENTKEY("Document Type","Sell-to Contact No.");
          SalesHeader.SETRANGE("Document Type",SalesHeader."Document Type"::Quote);
          SalesHeader.SETRANGE("Sell-to Contact No.",Cont."No.");
          IF SalesHeader.FIND('-') THEN
            REPEAT
              SalesHeader."Sell-to Customer No." := Customer."No.";
              SalesHeader."Sell-to Customer Template Code" := '';
              SalesHeader.MODIFY;
              SalesLine.SETRANGE("Document Type",SalesHeader."Document Type");
              SalesLine.SETRANGE("Document No.",SalesHeader."No.");
              IF SalesLine.FINDFIRST THEN
                SalesLine.MODIFYALL("Sell-to Customer No.",SalesHeader."Sell-to Customer No.");
            UNTIL SalesHeader.NEXT = 0;

          SalesHeader.RESET;
          SalesHeader.SETCURRENTKEY("Bill-to Contact No.");
          SalesHeader.SETRANGE("Document Type",SalesHeader."Document Type"::Quote);
          SalesHeader.SETRANGE("Bill-to Contact No.",Cont."No.");
          IF SalesHeader.FIND('-') THEN
            REPEAT
              SalesHeader."Bill-to Customer No." := Customer."No.";
              SalesHeader."Bill-to Customer Template Code" := '';
              SalesHeader."Salesperson Code" := Customer."Salesperson Code";
              SalesHeader.MODIFY;
              SalesLine.SETRANGE("Document Type",SalesHeader."Document Type");
              SalesLine.SETRANGE("Document No.",SalesHeader."No.");
              IF SalesLine.FINDFIRST THEN
                SalesLine.MODIFYALL("Bill-to Customer No.",SalesHeader."Bill-to Customer No.");
            UNTIL SalesHeader.NEXT = 0;
        UNTIL Cont.NEXT = 0;
    END;

    PROCEDURE GetSalutation@18(SalutationType@1001 : 'Formal,Informal';LanguageCode@1000 : Code[10]) : Text[260];
    VAR
      SalutationFormula@1005 : Record 5069;
      NamePart@1004 : ARRAY [5] OF Text[50];
      SubStr@1003 : Text[30];
      i@1002 : Integer;
    BEGIN
      IF NOT SalutationFormula.GET("Salutation Code",LanguageCode,SalutationType) THEN
        ERROR(Text021,LanguageCode,"No.");
      SalutationFormula.TESTFIELD(Salutation);

      CASE SalutationFormula."Name 1" OF
        SalutationFormula."Name 1"::"Job Title":
          NamePart[1] := "Job Title";
        SalutationFormula."Name 1"::"First Name":
          NamePart[1] := "First Name";
        SalutationFormula."Name 1"::"Middle Name":
          NamePart[1] := "Middle Name";
        SalutationFormula."Name 1"::Surname:
          NamePart[1] := Surname;
        SalutationFormula."Name 1"::Initials:
          NamePart[1] := Initials;
        SalutationFormula."Name 1"::"Company Name":
          NamePart[1] := "Company Name";
      END;

      CASE SalutationFormula."Name 2" OF
        SalutationFormula."Name 2"::"Job Title":
          NamePart[2] := "Job Title";
        SalutationFormula."Name 2"::"First Name":
          NamePart[2] := "First Name";
        SalutationFormula."Name 2"::"Middle Name":
          NamePart[2] := "Middle Name";
        SalutationFormula."Name 2"::Surname:
          NamePart[2] := Surname;
        SalutationFormula."Name 2"::Initials:
          NamePart[2] := Initials;
        SalutationFormula."Name 2"::"Company Name":
          NamePart[2] := "Company Name";
      END;

      CASE SalutationFormula."Name 3" OF
        SalutationFormula."Name 3"::"Job Title":
          NamePart[3] := "Job Title";
        SalutationFormula."Name 3"::"First Name":
          NamePart[3] := "First Name";
        SalutationFormula."Name 3"::"Middle Name":
          NamePart[3] := "Middle Name";
        SalutationFormula."Name 3"::Surname:
          NamePart[3] := Surname;
        SalutationFormula."Name 3"::Initials:
          NamePart[3] := Initials;
        SalutationFormula."Name 3"::"Company Name":
          NamePart[3] := "Company Name";
      END;

      CASE SalutationFormula."Name 4" OF
        SalutationFormula."Name 4"::"Job Title":
          NamePart[4] := "Job Title";
        SalutationFormula."Name 4"::"First Name":
          NamePart[4] := "First Name";
        SalutationFormula."Name 4"::"Middle Name":
          NamePart[4] := "Middle Name";
        SalutationFormula."Name 4"::Surname:
          NamePart[4] := Surname;
        SalutationFormula."Name 4"::Initials:
          NamePart[4] := Initials;
        SalutationFormula."Name 4"::"Company Name":
          NamePart[4] := "Company Name";
      END;

      CASE SalutationFormula."Name 5" OF
        SalutationFormula."Name 5"::"Job Title":
          NamePart[5] := "Job Title";
        SalutationFormula."Name 5"::"First Name":
          NamePart[5] := "First Name";
        SalutationFormula."Name 5"::"Middle Name":
          NamePart[5] := "Middle Name";
        SalutationFormula."Name 5"::Surname:
          NamePart[5] := Surname;
        SalutationFormula."Name 5"::Initials:
          NamePart[5] := Initials;
        SalutationFormula."Name 5"::"Company Name":
          NamePart[5] := "Company Name";
      END;

      FOR i := 1 TO 5 DO
        IF NamePart[i] = '' THEN BEGIN
          SubStr := '%' + FORMAT(i) + ' ';
          IF STRPOS(SalutationFormula.Salutation,SubStr) > 0 THEN
            SalutationFormula.Salutation :=
              DELSTR(SalutationFormula.Salutation,STRPOS(SalutationFormula.Salutation,SubStr),3);
        END;

      EXIT(STRSUBSTNO(SalutationFormula.Salutation,NamePart[1],NamePart[2],NamePart[3],NamePart[4],NamePart[5]))
    END;

    PROCEDURE InheritCompanyToPersonData@24(Cont@1000 : Record 5050;KeepPersonalData@1001 : Boolean);
    BEGIN
      "Company Name" := Cont.Name;

      RMSetup.GET;
      IF RMSetup."Inherit Salesperson Code" THEN
        "Salesperson Code" := Cont."Salesperson Code";
      IF RMSetup."Inherit Territory Code" THEN
        "Territory Code" := Cont."Territory Code";
      IF RMSetup."Inherit Country/Region Code" THEN
        "Country/Region Code" := Cont."Country/Region Code";
      IF RMSetup."Inherit Language Code" THEN
        "Language Code" := Cont."Language Code";
      IF RMSetup."Inherit Address Details" AND
         ((NOT KeepPersonalData) OR
          (Cont.Address + Cont."Address 2" + Cont.County + Cont."Post Code" + Cont.City <> ''))
      THEN BEGIN
        Address := Cont.Address;
        "Address 2" := Cont."Address 2";
        "Post Code" := Cont."Post Code";
        City := Cont.City;
        County := Cont.County;
      END;
      IF RMSetup."Inherit Communication Details" THEN BEGIN
        IF (Cont."Phone No." <> '') OR NOT KeepPersonalData THEN
          "Phone No." := Cont."Phone No.";
        IF (Cont."Telex No." <> '') OR NOT KeepPersonalData THEN
          "Telex No." := Cont."Telex No.";
        IF (Cont."Fax No." <> '') OR NOT KeepPersonalData THEN
          "Fax No." := Cont."Fax No.";
        IF (Cont."Telex Answer Back" <> '') OR NOT KeepPersonalData THEN
          "Telex Answer Back" := Cont."Telex Answer Back";
        IF (Cont."E-Mail" <> '') OR NOT KeepPersonalData THEN
          VALIDATE("E-Mail",Cont."E-Mail");
        IF (Cont."Home Page" <> '') OR NOT KeepPersonalData THEN
          "Home Page" := Cont."Home Page";
        IF (Cont."Extension No." <> '') OR NOT KeepPersonalData THEN
          "Extension No." := Cont."Extension No.";
        IF (Cont."Mobile Phone No." <> '') OR NOT KeepPersonalData THEN
          "Mobile Phone No." := Cont."Mobile Phone No.";
        IF (Cont.Pager <> '') OR NOT KeepPersonalData THEN
          Pager := Cont.Pager;
        IF (Cont."Correspondence Type" <> "Correspondence Type"::" ") OR NOT KeepPersonalData THEN
          "Correspondence Type" := Cont."Correspondence Type";
      END;
      CALCFIELDS("No. of Industry Groups","No. of Business Relations");
    END;

    PROCEDURE SetHideValidationDialog@26(NewHideValidationDialog@1000 : Boolean) : Boolean;
    BEGIN
      HideValidationDialog := NewHideValidationDialog;
    END;

    PROCEDURE DisplayMap@36();
    VAR
      MapPoint@1001 : Record 800;
      MapMgt@1000 : Codeunit 802;
    BEGIN
      IF MapPoint.FINDFIRST THEN
        MapMgt.MakeSelection(DATABASE::Contact,GETPOSITION)
      ELSE
        MESSAGE(Text033);
    END;

    PROCEDURE ProcessNameChange@37();
    VAR
      ContBusRel@1000 : Record 5054;
      Cust@1001 : Record 18;
      Vend@1002 : Record 23;
    BEGIN
      UpdateSearchName;

      //DOC OP10610 DS 15/09/2017 - commented out
      //IF Type = Type::Company THEN
      //  IF "Company Name" = '' THEN  //SDL1.069
      //    "Company Name" := Name;
      //DOC OP10610 DS 15/09/2017 +

      //DOC OP10610 DD 05/10/2017 - Update Company Name on change of First and Surname
      IF (Name <> xRec.Name) THEN BEGIN
        "Company Name" := Name;
      END;
      //DOC OP10610 DD 05/10/2017 +

      //DOC OP10610 DD 05/10/2017 -
      //IF Type = Type::Person THEN BEGIN
      IF ("Company Name" <> xRec."Company Name") THEN BEGIN
      //DOC OP10610 DD 05/10/2017 +
        ContBusRel.RESET;
        ContBusRel.SETCURRENTKEY("Link to Table","Contact No.");
        ContBusRel.SETRANGE("Link to Table",ContBusRel."Link to Table"::Customer);
        ContBusRel.SETRANGE("Contact No.","Company No.");
        IF ContBusRel.FINDFIRST THEN
          IF Cust.GET(ContBusRel."No.") THEN
            IF Cust."Primary Contact No." = "No." THEN BEGIN
              Cust.Contact := Name;
              //DOC OP10610 DD 05/10/2017 -
              Cust.Name := "Company Name";
              Cust.CompanyName := "Company Name";
              Cust."Search Name" := "Company Name";
              //DOC OP10610 DD 26/10/2017 -
                //Cust.Contact := "Company Name"; //DOC OP10610 DD 12/10/2017 -+
              IF (Cust."Customer Type" <> "Customer Type") THEN
                Cust."Customer Type" := "Customer Type";
              //DOC OP10610 DD 26/10/2017 +
              //DOC OP10610 DD 05/10/2017 +
              Cust.MODIFY;
              //MESSAGE('Customer %1 updated, Contact %2',Cust."No.",Cust.Contact);
            END;

        ContBusRel.SETRANGE("Link to Table",ContBusRel."Link to Table"::Vendor);
        IF ContBusRel.FINDFIRST THEN
          IF Vend.GET(ContBusRel."No.") THEN
            IF Vend."Primary Contact No." = "No." THEN BEGIN
              Vend.Contact := Name;
              Vend.MODIFY;
            END;
      END;
    END;

    PROCEDURE CreateMagentoCustomer@1000000000(CustomerTemplate@1006 : Code[10];SalesOrderNode@1000000001 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode");
    VAR
      Cust@1000 : Record 18;
      ContComp@1001 : Record 5050;
      CustTemplate@1003 : Record 5105;
      DefaultDim@1005 : Record 352;
      DefaultDim2@1004 : Record 352;
      DefaultSetup@1000000000 : Record 80005;
    BEGIN
      TESTFIELD("Company No.");
      RMSetup.GET;
      RMSetup.TESTFIELD("Bus. Rel. Code for Customers");

      ContBusRel.RESET;
      ContBusRel.SETRANGE("Contact No.","No.");
      ContBusRel.SETRANGE("Link to Table",ContBusRel."Link to Table"::Customer);
      IF ContBusRel.FINDFIRST THEN
        ERROR(
          Text019,
          TABLECAPTION,"No.",ContBusRel.TABLECAPTION,ContBusRel."Link to Table",ContBusRel."No.");

      IF CustomerTemplate <> '' THEN
        CustTemplate.GET(CustomerTemplate);

      CLEAR(Cust);
      Cust.SetInsertFromContact(TRUE);
      Cust.INSERT(TRUE);
      Cust.SetInsertFromContact(FALSE);

      IF Type = Type::Company THEN
        ContComp := Rec
      ELSE
        ContComp.GET("Company No.");

      ContBusRel."Contact No." := ContComp."No.";
      ContBusRel."Business Relation Code" := RMSetup."Bus. Rel. Code for Customers";
      ContBusRel."Link to Table" := ContBusRel."Link to Table"::Customer;
      ContBusRel."No." := Cust."No.";
      ContBusRel.INSERT(TRUE);

      UpdateCustVendBank.UpdateCustomer(ContComp,ContBusRel);

      Cust.GET(ContBusRel."No.");
      //SDL1.063 START
      //Cust.VALIDATE(Name,"Company Name");
      IF "Company Name" <> '' THEN
        Cust.VALIDATE(Name,"Company Name")
      ELSE
        Cust.VALIDATE(Name,Name);
      //SDL1.063 FINISH

      Cust.VALIDATE("Customer Type","Customer Type");  //SDL1.000 - DJR

      // SDL1.109 - START
      Cust."Special Instruction 1" := "Special Instruction 1";
      Cust."Special Instruction 2" := "Special Instruction 2";
      Cust."Residential Property" := "Residential Property";
      Cust."Email For Carrier Confirm" := "Email For Carrier Confirm";
      Cust."Phone For Carrier Confirm" := "Phone For Carrier Confirm";
      Cust."Collection On Delivery" := "Collection On Delivery";
      // SDL1.109 - FINISH
      DefaultSetup.GET;
      Cust."Customer Posting Group" := DefaultSetup."Default Customer Posting Group";
      Cust."Gen. Bus. Posting Group" := DefaultSetup."Default General Posting Group";
      Cust."VAT Bus. Posting Group" := DefaultSetup."Default VAT Bus. Posting Group";
      Cust."Magento Customer Id" := SalesOrderNode.SelectSingleNode('customer_id').InnerText;
      //Cust.County                := ''
      Cust.MODIFY;

      IF CustTemplate.Code <> '' THEN BEGIN
        Cust."Territory Code" := "Territory Code";
        Cust."Currency Code" := ContComp."Currency Code";
        Cust."Country/Region Code" := "Country/Region Code";
        Cust."Customer Posting Group" := CustTemplate."Customer Posting Group";
        Cust."Customer Price Group" := CustTemplate."Customer Price Group";
        Cust."Invoice Disc. Code" := CustTemplate."Invoice Disc. Code";
        Cust."Customer Disc. Group" := CustTemplate."Customer Disc. Group";
        Cust."Allow Line Disc." := CustTemplate."Allow Line Disc.";
        Cust."Gen. Bus. Posting Group" := CustTemplate."Gen. Bus. Posting Group";
        Cust."VAT Bus. Posting Group" := CustTemplate."VAT Bus. Posting Group";
        Cust."Payment Terms Code" := CustTemplate."Payment Terms Code";
        Cust."Payment Method Code" := CustTemplate."Payment Method Code";
        Cust."Shipment Method Code" := CustTemplate."Shipment Method Code";

        // SDL1.090 - START
        Cust."Shipping Advice" := CustTemplate."Shipping Advice";
        Cust."Shipping Agent Code" := CustTemplate."Shipping Agent Code";
        Cust."Shipping Agent Service Code" := CustTemplate."Shipping Agent Service Code";
        // SDL1.090 - FINISH

        Cust.MODIFY;

        DefaultDim.SETRANGE("Table ID",DATABASE::"Customer Template");
        DefaultDim.SETRANGE("No.",CustTemplate.Code);
        IF DefaultDim.FIND('-') THEN
          REPEAT
            CLEAR(DefaultDim2);
            DefaultDim2.INIT;
            DefaultDim2.VALIDATE("Table ID",DATABASE::Customer);
            DefaultDim2."No." := Cust."No.";
            DefaultDim2.VALIDATE("Dimension Code",DefaultDim."Dimension Code");
            DefaultDim2.VALIDATE("Dimension Value Code",DefaultDim."Dimension Value Code");
            DefaultDim2."Value Posting" := DefaultDim."Value Posting";
            DefaultDim2.INSERT(TRUE);
          UNTIL DefaultDim.NEXT = 0;

      END;

      // SDL048 ARI 16/12/2008 start
      DefaultDim.RESET;
      DefaultDim.SETRANGE("Table ID", DATABASE::"Customer Price Group");
      DefaultDim.SETRANGE("No.", Cust."No.");
      DefaultDim.SETRANGE("Dimension Code", "Default Dimension Code");
      IF NOT DefaultDim.FIND('-') THEN BEGIN
        DefaultDim.INIT;
        DefaultDim."Table ID" := DATABASE::Customer;
        DefaultDim."No." := Cust."No.";
        DefaultDim."Dimension Code" := "Default Dimension Code";
        DefaultDim.INSERT(TRUE);
      END;
      DefaultDim.VALIDATE("Dimension Value Code", "Default Dimension Value");
      DefaultDim.MODIFY(TRUE);
      // SDL048 ARI 16/12/2008 finish

      UpdateQuotes(Cust);
      CampaignMgt.ConverttoCustomer(Rec,Cust);

      // SDL007 - START - Validate Territory
      Cust.VALIDATE("Territory Code");
      // SDL007 - END - Validate Territory

      //MESSAGE(Text009, Cust.TABLECAPTION, Cust."No.");
    END;

    PROCEDURE SetToTransfer@1000000001();
    BEGIN
      //DOC OP10442 LF 02/05/2017 - Determines if a designated field has been modified and sets the Transfer record to TRUE
      //This will be used to determine if the record should be uploaded to Emarsys
      IF (Type = Type::Company) THEN BEGIN
        IF (Name = xRec.Name) OR
           (Address = xRec.Address) OR
           ("Address 2" = xRec."Address 2") OR
           (City = xRec.City) OR
           (County = xRec.County) OR
           ("Post Code" = xRec."Post Code") OR
           ("Country/Region Code" = xRec."Country/Region Code") OR
           ("Phone No." = xRec."Phone No.") OR
           ("Mobile Phone No." = xRec."Mobile Phone No.") OR
           ("E-Mail" = xRec."E-Mail") OR
           ("Customer Type" = xRec."Customer Type") OR
           ("First Name" = xRec."First Name") OR
           (Surname = xRec.Surname) OR
           ("Info By E-Mail" = xRec."Info By E-Mail") OR
           ("Info By Post" = xRec."Info By Post") OR
           ("Third Party Info" = xRec."Third Party Info")  THEN

           Transfer := TRUE;

      END;
    END;

    BEGIN
    {
      SDL048 A.Ireland 16/12/2008
        Added new fields:
          "Default Dimension Code"
          "Default Dimension Value"
        Added code to OnInsert trigger to populate Default Dimension Code from RMSetup.
        Added code to CreateCustomer to copy Default Dimension Code and Value from Contact to created Customer.
      Replaced SDL007,SDL025,SDL014,SDL048 on version list with SDL1.000
      SDL1.000 - J Parr QUK 12/2/09
        Correct spelling of f60706
      SDL1.000 - A Ireland QUK 23/2/09
        Changed QAS Rapid integration on Post Code field to work with QAS Pro Web
      SDL1.000 - D Roocroft QUK 10/03/09
        Additional fields in CreateCustomer
      SDL1.000  A.Ireland QUK  QAS integration  20/03/2009
        Reworked Pro Web integration to use Web Service.
      16.06.09  IJF
        Insert/Modify/Delete/Rename now logged in E-Direct Change Log table.
      SDL1.025 - J Parr QUK 6/8/09 J41730
        add f60701 to indicate contacts created by the web
      SDL1.034 - J Parr QUK 15/9/09 J41730
        add f60720-3 to hold marketing contact info
      SDL1.057 - J Parr QUK 17/3/10 J42845/P0127-01-01-01
        do not update company name on contacts, this will be done from the customer card
      SDL1.063 - J Parr QUK 28/5/10 P0127-01-03-02
        fix name handling when creating customers
      SDL1.069 - J Parr QUK 15/6/10
        Replace SDL1.057 with code to only update co.name if it is blank when name is validated
      SDL1.090 - 04/10/10 - DJR QUK
        Set SHipping fields in CrateCustomer function
      SDL2.013 - 27/07/15 - DJR PUK
        Added F60746-60747

      //DOC OP10442 LF 02/05/2017 - added function SetToTransfer() and new Key "Type,Transfer"
      //DOC OP10610 DS 15/09/2017 - "Company Name" is no longer updated when "Name" changes
                                    Populate Customer."Mobile No" & Contact when Customer is created from Contact
      //DOC OP10610 DD 05/10/2017 - Various chnages.
      //DOC OP10610 DD 26/10/2017 - Sync Customer Type
      //DOC OP11992 HR 07/11/2017 - New fields added: "First Invoice Date" , "Last Invoice Date"
      //DOC OP13346 MBP 04/06/2018 - New field added: 60760 "Info Preference, Last Update"
      //DOC OP13472 JF 06/08/2018 - Sync with Emarsys
      //DOC OP14430 MPH 16/11/2018 - Add code to check email address in unique and in correct format
      //DOC OP14491 DRM 16/11/2018 - Loqate Address Verification integration.
    }
    END.
  }
}

OBJECT Table 50002 Loqate Address Response
{
  OBJECT-PROPERTIES
  {
    Date=22/11/18;
    Time=21:20:41;
    Modified=Yes;
    Version List=OP14491;
  }
  PROPERTIES
  {
    LookupPageID=Page50002;
    DrillDownPageID=Page50002;
  }
  FIELDS
  {
    { 10  ;   ;Id                  ;Text80        ;CaptionML=[ENU=Id;
                                                              ENG=Id] }
    { 20  ;   ;Type                ;Text30        ;CaptionML=[ENU=Type;
                                                              ENG=Type] }
    { 30  ;   ;Text                ;Text250       ;CaptionML=[ENU=Text;
                                                              ENG=Text] }
    { 40  ;   ;Highlight           ;Text30        ;CaptionML=[ENU=Highlight;
                                                              ENG=Highlight] }
    { 50  ;   ;Description         ;Text100       ;CaptionML=[ENU=Description;
                                                              ENG=Description] }
    { 60  ;   ;Sort No.            ;Integer        }
  }
  KEYS
  {
    {    ;Id                                      ;Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {

    BEGIN
    END.
  }
}

OBJECT Codeunit 50002 Loqate Functions
{
  OBJECT-PROPERTIES
  {
    Date=05/12/18;
    Time=09:32:24;
    Modified=Yes;
    Version List=OP14491;
  }
  PROPERTIES
  {
    OnRun=VAR
            CompanyName@1000000005 : Text;
            Address@1000000004 : Text;
            Address2@1000000003 : Text;
            City@1000000002 : Text;
            County@1000000001 : Text;
            PostCode@1000000000 : Code[20];
          BEGIN
          END;

  }
  CODE
  {
    VAR
      HTTPUtility@1000000000 : DotNet "'System.Web, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.System.Web.HttpUtility";
      GLSetup@1000000001 : Record 98;
      GLSetupRetrieved@1000000002 : Boolean;
      CheckEnabledNotComplete@1000000003 : TextConst 'ENU=CheckEnabled function should be run first.;ENG=CheckEnabled function should be run first.';
      Container@1000000004 : Text;
      ErrNoResults@1000000005 : TextConst 'ENU=No results found for this Postcode.;ENG=No results found for this Postcode.';
      CompanyInformation@1000000006 : Record 79;
      ErrNoCountries@1000000007 : TextConst 'ENU=Setup at least one country on the Countries/Regions table to get results for this Postcode.;ENG=Setup at least one country on the Countries/Regions table to get results for this Postcode.';

    PROCEDURE CaptureInteractiveFind@1000000001(pSearchText@1000000001 : Text;VAR pCompanyName@1000000023 : Text;VAR pAddress@1000000031 : Text;VAR pAddress2@1000000032 : Text;VAR pCity@1000000033 : Text;VAR pCounty@1000000034 : Text;VAR pPostCode@1000000035 : Code[20]);
    VAR
      URL@1000000003 : Text;
      Origin@1000000004 : Text;
      Countries@1000000005 : Text;
      Limit@1000000006 : Integer;
      Language@1000000007 : Text;
      HttpWebRequest@1000000008 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Net.HttpWebRequest";
      XMLDoc@1000000010 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
      HttpWebResponse@1000000012 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Net.HttpWebResponse";
      MemoryStream@1000000013 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream";
      StreamReader@1000000015 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.StreamReader";
      Encoding@1000000016 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Text.Encoding";
      XMLNode@1000000017 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      InternalServerError@1000000009 : TextConst 'ENU=Http Response Status %1, %2;ENG=Http Response Status %1, %2';
      XMLNodeList@1000000011 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeList";
      i@1000000014 : Integer;
      NoOfColumns@1000000018 : Integer;
      NoOfRows@1000000019 : Integer;
      XMLAttribute@1000000021 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlAttribute";
      XMLAttributeCollection@1000000022 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlAttributeCollection";
      Column@1000000020 : ARRAY [5] OF Text;
      ErrorNo@1000000024 : Text;
      ErrorDesc@1000000025 : Text;
      ErrorCause@1000000026 : Text;
      ErrorResolution@1000000027 : Text;
      PassedError@1000000028 : TextConst 'ENU=Error %1, %2. %3 %4';
      LoqateAddressResponseTmp@1000000030 : TEMPORARY Record 50002;
      j@1000000029 : Integer;
      Country@1000000000 : Record 9;
    BEGIN
      IF NOT GLSetupRetrieved THEN
        ERROR(CheckEnabledNotComplete);

      //DOC OP14491 DB 15/11/2018 -
      IF NOT CompanyInformation.GET THEN
        CompanyInformation.INIT;

      IF CompanyInformation."Country/Region Code"<>'' THEN
        Origin := CompanyInformation."Country/Region Code";

      Country.SETRANGE("Loqate Country",TRUE);
      IF Country.FINDSET THEN BEGIN
        REPEAT
          IF Countries = '' THEN
            Countries := Country.Code
          ELSE
            Countries += ','+Country.Code;
        UNTIL Country.NEXT =0;
      END ELSE
        ERROR(ErrNoCountries);
      //DOC OP14491 DB 15/11/2018 +



      //XML Attribute based endpoint

      //Build the URL..
      URL := 'https://api.addressy.com/Capture/Interactive/Find/v1.00/xmla.ws';
      URL += '?Key=' + HTTPUtility.HtmlEncode(GLSetup."Loqate Service Key");
      URL += '&Text=' + HTTPUtility.HtmlEncode(pSearchText);
      URL += '&Container=' + HTTPUtility.HtmlEncode(Container);
      URL += '&Origin=' + HTTPUtility.HtmlEncode(Origin);
      URL += '&Countries=' + HTTPUtility.HtmlEncode(Countries);
      URL += '&Limit=' + HTTPUtility.HtmlEncode(Limit);
      URL += '&Language=' + HTTPUtility.HtmlEncode(Language);


      //test error
      //URL := 'https://api.addressy.com/Capture/Interactive/Find/v1.00/xmla.ws?Key=AA11-AA11-AA11-AA11&Text=wr5 3da&Container=GB|RM|ENG|3DA-WR5&Origin=52.182,-2.222&Countries=GB,US,CA&Limit=10&Language=';

      IF ISNULL(XMLDoc) THEN
        XMLDoc := XMLDoc.XmlDocument;

      //Make the Request
      HttpWebRequest := HttpWebRequest.Create(URL);
      HttpWebRequest.UseDefaultCredentials(TRUE);
      HttpWebRequest.Method('GET');
      HttpWebRequest.AllowAutoRedirect(TRUE);
      HttpWebRequest.ContentType('text/xml; charset=utf-8');
      HttpWebRequest.KeepAlive(TRUE);
      HttpWebRequest.ContentLength := 0;

      HttpWebResponse := HttpWebRequest.GetResponse;
      MemoryStream := HttpWebResponse.GetResponseStream;
      StreamReader := StreamReader.StreamReader(MemoryStream,Encoding.UTF8);
      XMLDoc.LoadXml(StreamReader.ReadToEnd);
      MemoryStream.Close;

      //check Response
      //XMLDoc.Save('C:\Temp\DebTest.XML');
      CLEAR(NoOfColumns);
      CLEAR(NoOfRows);
      CASE FORMAT(HttpWebResponse.StatusCode) OF
        'OK' :
          BEGIN
            XMLNodeList := XMLDoc.SelectNodes('//Table/*');
            FOR i := 0 TO XMLNodeList.Count - 1 DO BEGIN
              XMLNode := XMLNodeList.Item(i);
              CASE XMLNode.Name OF
                'Columns' :
                  BEGIN
                    XMLAttributeCollection := XMLNode.Attributes;
                    XMLNode := XMLAttributeCollection.GetNamedItem('Items');
                    IF EVALUATE(NoOfColumns,XMLNode.InnerText) THEN;
                  END;
                'Rows' :
                  BEGIN
                    XMLAttributeCollection := XMLNode.Attributes;
                    XMLNode := XMLAttributeCollection.GetNamedItem('Items');
                    IF EVALUATE(NoOfRows,XMLNode.InnerText) THEN;
                  END;
              END;
            END;

            //Check for an error...
            IF NoOfColumns = 4 THEN BEGIN
              XMLNode := XMLDoc.SelectSingleNode('//Table/Columns/Column');
              XMLAttributeCollection := XMLNode.Attributes;
              XMLNode := XMLAttributeCollection.GetNamedItem('Name');
              IF XMLNode.InnerText = 'Error' THEN BEGIN
                XMLNode := XMLDoc.SelectSingleNode('//Table/Rows/Row');
                XMLAttributeCollection := XMLNode.Attributes;
                FOR i := 0 TO XMLAttributeCollection.Count -1 DO BEGIN
                  XMLNode := XMLAttributeCollection.Item(i);
                  CASE XMLNode.Name OF
                    'Resolution' : ErrorResolution := XMLNode.InnerText;
                    'Cause' : ErrorCause := XMLNode.InnerText;
                    'Description' : ErrorDesc := XMLNode.InnerText;
                    'Error' : ErrorNo := XMLNode.InnerText;
                  END;
                END;
              END;
              ERROR(PassedError,ErrorNo,ErrorDesc,ErrorCause,ErrorResolution);
            END ELSE BEGIN
              //handle returned details
              XMLNodeList := XMLDoc.SelectNodes('//Table/Rows/*');
              FOR i := 0 TO XMLNodeList.Count - 1 DO BEGIN
                XMLNode := XMLNodeList.Item(i);  //Row
                LoqateAddressResponseTmp.INIT;
                XMLAttributeCollection := XMLNode.Attributes;
                FOR j := 0 TO XMLAttributeCollection.Count - 1 DO BEGIN
                  XMLNode := XMLAttributeCollection.Item(j);
                  CASE XMLNode.Name OF
                    LoqateAddressResponseTmp.FIELDNAME(Id) : LoqateAddressResponseTmp.Id := XMLNode.InnerText;
                    LoqateAddressResponseTmp.FIELDNAME(Type) : LoqateAddressResponseTmp.Type := XMLNode.InnerText;
                    LoqateAddressResponseTmp.FIELDNAME(Text) : LoqateAddressResponseTmp.Text := XMLNode.InnerText;
                    LoqateAddressResponseTmp.FIELDNAME(Highlight) : LoqateAddressResponseTmp.Highlight := XMLNode.InnerText;
                    LoqateAddressResponseTmp.FIELDNAME(Description) : LoqateAddressResponseTmp.Description := XMLNode.InnerText;
                  END;
                END;
                LoqateAddressResponseTmp."Sort No." := i;
                LoqateAddressResponseTmp.INSERT;
              END;
              //DOC OP14491 DB 22/11/2018 -
              {IF PAGE.RUNMODAL(0,LoqateAddressResponseTmp) = ACTION::LookupOK THEN BEGIN
                IF LoqateAddressResponseTmp.Type = 'Address' THEN BEGIN
                  CaptureInteractiveRetreive(GLSetup."Loqate Service Key",LoqateAddressResponseTmp.Id,pCompanyName,pAddress,pAddress2,pCity,pCounty,pPostCode)
                END ELSE BEGIN
                  Container := LoqateAddressResponseTmp.Id;
                  CaptureInteractiveFind(pSearchText,pCompanyName,pAddress,pAddress2,pCity,pCounty,pPostCode);
                END;
              END;}
              IF LoqateAddressResponseTmp.ISEMPTY THEN
                ERROR(ErrNoResults);
              LoqateAddressResponseTmp.SETFILTER(Type,'<>%1','Address');
              IF NOT LoqateAddressResponseTmp.ISEMPTY THEN BEGIN
                IF LoqateAddressResponseTmp.COUNT>1 THEN BEGIN
                  LoqateAddressResponseTmp.RESET;
                  IF PAGE.RUNMODAL(0,LoqateAddressResponseTmp) = ACTION::LookupOK THEN BEGIN
                    IF LoqateAddressResponseTmp.Type = 'Address' THEN BEGIN
                      CaptureInteractiveRetreive(GLSetup."Loqate Service Key",LoqateAddressResponseTmp.Id,pCompanyName,pAddress,pAddress2,pCity,pCounty,pPostCode)
                    END ELSE BEGIN
                      Container := LoqateAddressResponseTmp.Id;
                      CaptureInteractiveFind(pSearchText,pCompanyName,pAddress,pAddress2,pCity,pCounty,pPostCode);
                    END;
                  END;
                END;
                IF LoqateAddressResponseTmp.COUNT=1 THEN BEGIN
                  LoqateAddressResponseTmp.RESET;
                  IF LoqateAddressResponseTmp.COUNT>1 THEN BEGIN
                    IF PAGE.RUNMODAL(0,LoqateAddressResponseTmp) = ACTION::LookupOK THEN BEGIN
                      IF LoqateAddressResponseTmp.Type = 'Address' THEN BEGIN
                        CaptureInteractiveRetreive(GLSetup."Loqate Service Key",LoqateAddressResponseTmp.Id,pCompanyName,pAddress,pAddress2,pCity,pCounty,pPostCode)
                      END ELSE BEGIN
                        Container := LoqateAddressResponseTmp.Id;
                        CaptureInteractiveFind(pSearchText,pCompanyName,pAddress,pAddress2,pCity,pCounty,pPostCode);
                      END;
                    END;
                  END;
                  IF LoqateAddressResponseTmp.COUNT=1 THEN BEGIN
                    LoqateAddressResponseTmp.FINDFIRST;
                    Container := LoqateAddressResponseTmp.Id;
                    CaptureInteractiveFind(pSearchText,pCompanyName,pAddress,pAddress2,pCity,pCounty,pPostCode);
                  END;
                END;
              END ELSE BEGIN
                LoqateAddressResponseTmp.RESET;
                IF PAGE.RUNMODAL(0,LoqateAddressResponseTmp) = ACTION::LookupOK THEN
                  CaptureInteractiveRetreive(GLSetup."Loqate Service Key",LoqateAddressResponseTmp.Id,pCompanyName,pAddress,pAddress2,pCity,pCounty,pPostCode);
              END;
              //DOC OP14491 DB 22/11/2018 +
            END;
          END;
        ELSE
          ERROR(InternalServerError,FORMAT(HttpWebResponse.StatusCode),HttpWebResponse.StatusDescription);
      END;

      CLEAR(XMLDoc);
      CLEAR(HttpWebRequest);
      CLEAR(HttpWebResponse);
      CLEAR(MemoryStream);
      CLEAR(StreamReader);
      CLEAR(XMLNode);
      CLEAR(XMLNodeList);
      CLEAR(XMLAttributeCollection);
    END;

    PROCEDURE CaptureInteractiveRetreive@1000000007(pKey@1000000000 : Text;pId@1000000001 : Text;VAR CompanyName@1000000028 : Text;VAR Address@1000000027 : Text;VAR Address2@1000000026 : Text;VAR City@1000000025 : Text;VAR County@1000000024 : Text;VAR PostCode@1000000023 : Code[20]);
    VAR
      i@1000000002 : Integer;
      URL@1000000003 : Text;
      XMLDoc@1000000004 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
      HttpWebRequest@1000000005 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Net.HttpWebRequest";
      HttpWebResponse@1000000006 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Net.HttpWebResponse";
      MemoryStream@1000000009 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream";
      StreamReader@1000000008 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.StreamReader";
      Encoding@1000000007 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Text.Encoding";
      XMLNode@1000000016 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      XMLNodeList@1000000015 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeList";
      NoOfColumns@1000000013 : Integer;
      NoOfRows@1000000012 : Integer;
      XMLAttribute@1000000011 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlAttribute";
      XMLAttributeCollection@1000000010 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlAttributeCollection";
      ErrorNo@1000000019 : Text;
      ErrorDesc@1000000018 : Text;
      ErrorCause@1000000017 : Text;
      ErrorResolution@1000000014 : Text;
      InternalServerError@1000000021 : TextConst 'ENU=Http Response Status %1, %2;ENG=Http Response Status %1, %2';
      PassedError@1000000020 : TextConst 'ENU=Error %1, %2. %3 %4';
      j@1000000022 : Integer;
      AddressLine@1000000029 : ARRAY [3] OF Text;
    BEGIN
      //Build the URL..
      URL := 'https://api.addressy.com/Capture/Interactive/Retrieve/v1.00/xmla.ws';
      URL += '?Key=' + HTTPUtility.HtmlEncode(pKey);
      URL += '&Id=' + HTTPUtility.HtmlEncode(pId);
      FOR i := 1 TO 20 DO BEGIN
        URL += '&Field'+FORMAT(i)+'Format=' + HTTPUtility.HtmlEncode('');
      END;

      IF ISNULL(XMLDoc) THEN
        XMLDoc := XMLDoc.XmlDocument;

      //Make the Request
      HttpWebRequest := HttpWebRequest.Create(URL);
      HttpWebRequest.UseDefaultCredentials(TRUE);
      HttpWebRequest.Method('GET');
      HttpWebRequest.AllowAutoRedirect(TRUE);
      HttpWebRequest.ContentType('text/xml; charset=utf-8');
      HttpWebRequest.KeepAlive(TRUE);
      HttpWebRequest.ContentLength := 0;

      HttpWebResponse := HttpWebRequest.GetResponse;
      MemoryStream := HttpWebResponse.GetResponseStream;
      StreamReader := StreamReader.StreamReader(MemoryStream,Encoding.UTF8);
      XMLDoc.LoadXml(StreamReader.ReadToEnd);
      MemoryStream.Close;

      //check Response
      //XMLDoc.Save('C:\Temp\DebTest2.XML');
      CLEAR(NoOfColumns);
      CLEAR(NoOfRows);
      CASE FORMAT(HttpWebResponse.StatusCode) OF
        'OK' :
          BEGIN
            XMLNodeList := XMLDoc.SelectNodes('//Table/*');
            FOR i := 0 TO XMLNodeList.Count - 1 DO BEGIN
              XMLNode := XMLNodeList.Item(i);
              CASE XMLNode.Name OF
                'Columns' :
                  BEGIN
                    XMLAttributeCollection := XMLNode.Attributes;
                    XMLNode := XMLAttributeCollection.GetNamedItem('Items');
                    IF EVALUATE(NoOfColumns,XMLNode.InnerText) THEN;
                  END;
                'Rows' :
                  BEGIN
                    XMLAttributeCollection := XMLNode.Attributes;
                    XMLNode := XMLAttributeCollection.GetNamedItem('Items');
                    IF EVALUATE(NoOfRows,XMLNode.InnerText) THEN;
                  END;
              END;
            END;

            //Check for an error...
            IF NoOfColumns = 4 THEN BEGIN
              XMLNode := XMLDoc.SelectSingleNode('//Table/Columns/Column');
              XMLAttributeCollection := XMLNode.Attributes;
              XMLNode := XMLAttributeCollection.GetNamedItem('Name');
              IF XMLNode.InnerText = 'Error' THEN BEGIN
                XMLNode := XMLDoc.SelectSingleNode('//Table/Rows/Row');
                XMLAttributeCollection := XMLNode.Attributes;
                FOR i := 0 TO XMLAttributeCollection.Count -1 DO BEGIN
                  XMLNode := XMLAttributeCollection.Item(i);
                  CASE XMLNode.Name OF
                    'Resolution' : ErrorResolution := XMLNode.InnerText;
                    'Cause' : ErrorCause := XMLNode.InnerText;
                    'Description' : ErrorDesc := XMLNode.InnerText;
                    'Error' : ErrorNo := XMLNode.InnerText;
                  END;
                END;
              END;
              ERROR(PassedError,ErrorNo,ErrorDesc,ErrorCause,ErrorResolution);
            END ELSE BEGIN
              //handle returned details
              XMLNodeList := XMLDoc.SelectNodes('//Table/Rows/*');
              FOR i := 0 TO XMLNodeList.Count - 1 DO BEGIN
                XMLNode := XMLNodeList.Item(i);  //Row
                XMLAttributeCollection := XMLNode.Attributes;
                FOR j := 0 TO XMLAttributeCollection.Count - 1 DO BEGIN
                  XMLNode := XMLAttributeCollection.Item(j);
                  CASE XMLNode.Name OF
                    'Company' :
                      BEGIN
                        IF XMLNode.InnerText <> '' THEN
                          CompanyName := XMLNode.InnerText;
                      END;
                    //DOC OP14491 DB 05/12/2018 -
                    {'Line1' : Address := XMLNode.InnerText;
                    //DOC OP14491 DB 23/11/2018 -
                    //'Line2' : Address2 := XMLNode.InnerText;
                    'Line2' : Address := COPYSTR(Address+' '+XMLNode.InnerText,1,50);
                    'Line3' : Address2 := COPYSTR(XMLNode.InnerText,1,50);
                    //DOC OP14491 DB 23/11/2018 +
                    }
                    'Line1' : AddressLine[1] := XMLNode.InnerText;
                    'Line2' : AddressLine[2] := XMLNode.InnerText;
                    'Line3' : AddressLine[3] := XMLNode.InnerText;
                    //DOC OP14491 DB 05/12/2018 +
                    'City' : City := XMLNode.InnerText;
                    'Province' : County := XMLNode.InnerText;
                    'PostalCode' : PostCode := XMLNode.InnerText;
                  END;
                END;
                //DOC OP14491 DB 05/12/2018 -
                IF AddressLine[3]<>'' THEN BEGIN
                  IF AddressLine[2]<>'' THEN
                    Address := COPYSTR(AddressLine[1]+', '+AddressLine[2],1,50)
                  ELSE
                    Address := COPYSTR(AddressLine[1],1,50);;
                  Address2 := COPYSTR(AddressLine[3],1,50);
                END ELSE BEGIN
                  Address := COPYSTR(AddressLine[1],1,50);
                  Address2 := COPYSTR(AddressLine[2],1,50);
                END;
                //DOC OP14491 DB 05/12/2018 +
              END;
            END;
          END;
        ELSE
          ERROR(InternalServerError,FORMAT(HttpWebResponse.StatusCode),HttpWebResponse.StatusDescription);
      END;
      CLEAR(XMLDoc);
      CLEAR(HttpWebRequest);
      CLEAR(HttpWebResponse);
      CLEAR(MemoryStream);
      CLEAR(StreamReader);
      CLEAR(XMLNode);
      CLEAR(XMLNodeList);
      CLEAR(XMLAttributeCollection);
    END;

    PROCEDURE CheckEnabled@1000000002() : Boolean;
    BEGIN
      GLSetup.GET;
      GLSetupRetrieved := TRUE;
      EXIT(GLSetup."Loqate Enabled");
    END;

    BEGIN
    {
      //DOC OP14491 DRM 15/11/2018 - Created for Loqate Address verification integration.
      //DOC OP14491 DB 15/11/2018 - Changes to the logic to skip intermediate step when only one container.
      //DOC OP14491 DB 23/11/2018 - Changes to include "Line 3" of the results
      //DOC OP14491 DB 05/12/2018 - Changes to return Address and Address 2 in a different logic.
    }
    END.
  }
}

OBJECT Page 10 Countries/Regions
{
  OBJECT-PROPERTIES
  {
    Date=22/11/18;
    Time=13:09:00;
    Modified=Yes;
    Version List=NAVW17.00,SDL2.000,OP14491;
  }
  PROPERTIES
  {
    CaptionML=[ENU=Countries/Regions;
               ENG=Countries/Regions];
    SourceTable=Table9;
    PageType=List;
    ActionList=ACTIONS
    {
      { 1900000003;0 ;ActionContainer;
                      ActionContainerType=RelatedInformation }
      { 17      ;1   ;ActionGroup;
                      CaptionML=[ENU=&Country/Region;
                                 ENG=&Country/Region];
                      Image=CountryRegion }
      { 18      ;2   ;Action    ;
                      CaptionML=[ENU=VAT Reg. No. Formats;
                                 ENG=VAT Reg. No. Formats];
                      RunObject=Page 575;
                      RunPageLink=Country/Region Code=FIELD(Code);
                      Image=NumberSetup }
    }
  }
  CONTROLS
  {
    { 1900000001;0;Container;
                ContainerType=ContentArea }

    { 1   ;1   ;Group     ;
                GroupType=Repeater }

    { 2   ;2   ;Field     ;
                SourceExpr=Code }

    { 4   ;2   ;Field     ;
                SourceExpr=Name }

    { 6   ;2   ;Field     ;
                SourceExpr="Address Format" }

    { 15  ;2   ;Field     ;
                SourceExpr="Contact Address Format" }

    { 11  ;2   ;Field     ;
                SourceExpr="EU Country/Region Code";
                Visible=FALSE }

    { 13  ;2   ;Field     ;
                SourceExpr="Intrastat Code";
                Visible=FALSE }

    { 1040000;2;Field     ;
                SourceExpr="Territory Code" }

    { 1000000000;2;Field  ;
                SourceExpr="Loqate Country" }

    { 1900000007;0;Container;
                ContainerType=FactBoxArea }

    { 1900383207;1;Part   ;
                Visible=FALSE;
                PartType=System;
                SystemPartID=RecordLinks }

    { 1905767507;1;Part   ;
                Visible=FALSE;
                PartType=System;
                SystemPartID=Notes }

  }
  CODE
  {

    BEGIN
    {
      //DOC OP14491 DB 22/11/2018 - Added "Loqate Country" field
    }
    END.
  }
}

OBJECT Page 118 General Ledger Setup
{
  OBJECT-PROPERTIES
  {
    Date=22/11/18;
    Time=10:06:11;
    Modified=Yes;
    Version List=NAVW17.10,NAVGB7.10,QAS,SDL2.000,OP14491;
  }
  PROPERTIES
  {
    CaptionML=[ENU=General Ledger Setup;
               ENG=General Ledger Setup];
    InsertAllowed=No;
    DeleteAllowed=No;
    SourceTable=Table98;
    PageType=Card;
    OnInit=BEGIN
             ThresholdAmountEnable := TRUE;
           END;

    OnOpenPage=BEGIN
                 RESET;
                 IF NOT GET THEN BEGIN
                   INIT;
                   INSERT;
                 END;

                 IF "Threshold applies" THEN
                   ThresholdAmountEnable := TRUE
                 ELSE
                   ThresholdAmountEnable := FALSE;
               END;

    ActionList=ACTIONS
    {
      { 1900000004;0 ;ActionContainer;
                      ActionContainerType=ActionItems }
      { 42      ;1   ;ActionGroup;
                      CaptionML=[ENU=F&unctions;
                                 ENG=F&unctions];
                      Image=Action }
      { 44      ;2   ;Action    ;
                      Ellipsis=Yes;
                      CaptionML=[ENU=Change Global Dimensions;
                                 ENG=Change Global Dimensions];
                      Image=ChangeDimensions;
                      OnAction=BEGIN
                                 REPORT.RUNMODAL(REPORT::"Change Global Dimensions");
                               END;
                                }
      { 2       ;2   ;Action    ;
                      CaptionML=[ENU=Change Payment &Tolerance;
                                 ENG=Change Payment &Tolerance];
                      Image=ChangePaymentTolerance;
                      OnAction=VAR
                                 ChangePmtTol@1001 : Report 34;
                                 Currency@1002 : Record 4;
                               BEGIN
                                 Currency.INIT;
                                 ChangePmtTol.SetCurrency(Currency);
                                 ChangePmtTol.RUNMODAL;
                               END;
                                }
    }
  }
  CONTROLS
  {
    { 1900000001;0;Container;
                ContainerType=ContentArea }

    { 1   ;1   ;Group     ;
                CaptionML=[ENU=General;
                           ENG=General] }

    { 6   ;2   ;Field     ;
                SourceExpr="Allow Posting From" }

    { 8   ;2   ;Field     ;
                SourceExpr="Allow Posting To" }

    { 43  ;2   ;Field     ;
                SourceExpr="Register Time" }

    { 67  ;2   ;Field     ;
                SourceExpr="Local Address Format" }

    { 73  ;2   ;Field     ;
                SourceExpr="Local Cont. Addr. Format" }

    { 77  ;2   ;Field     ;
                SourceExpr="Inv. Rounding Precision (LCY)" }

    { 75  ;2   ;Field     ;
                SourceExpr="Inv. Rounding Type (LCY)" }

    { 55  ;2   ;Field     ;
                SourceExpr="Allow G/L Acc. Deletion Before" }

    { 60  ;2   ;Field     ;
                SourceExpr="Check G/L Account Usage" }

    { 14  ;2   ;Field     ;
                SourceExpr="EMU Currency" }

    { 18  ;2   ;Field     ;
                SourceExpr="LCY Code" }

    { 49  ;2   ;Field     ;
                SourceExpr="Pmt. Disc. Excl. VAT" }

    { 47  ;2   ;Field     ;
                SourceExpr="Adjust for Payment Disc." }

    { 21  ;2   ;Field     ;
                SourceExpr="Unrealized VAT" }

    { 86  ;2   ;Field     ;
                SourceExpr="Prepayment Unrealized VAT" }

    { 5   ;2   ;Field     ;
                SourceExpr="Max. VAT Difference Allowed" }

    { 3   ;2   ;Field     ;
                SourceExpr="VAT Rounding Type" }

    { 1040000;2;Field     ;
                SourceExpr="VAT Tolerance %" }

    { 82  ;2   ;Field     ;
                SourceExpr="Bill-to/Sell-to VAT Calc." }

    { 84  ;2   ;Field     ;
                SourceExpr="Print VAT specification in LCY" }

    { 4   ;2   ;Field     ;
                SourceExpr="Use Legacy G/L Entry Locking" }

    { 1904569201;1;Group  ;
                CaptionML=[ENU=Numbering;
                           ENG=Numbering] }

    { 10  ;2   ;Field     ;
                SourceExpr="Bank Account Nos." }

    { 1900309501;1;Group  ;
                CaptionML=[ENU=Dimensions;
                           ENG=Dimensions] }

    { 40  ;2   ;Field     ;
                SourceExpr="Global Dimension 1 Code" }

    { 38  ;2   ;Field     ;
                SourceExpr="Global Dimension 2 Code" }

    { 36  ;2   ;Field     ;
                SourceExpr="Shortcut Dimension 1 Code" }

    { 34  ;2   ;Field     ;
                SourceExpr="Shortcut Dimension 2 Code" }

    { 32  ;2   ;Field     ;
                SourceExpr="Shortcut Dimension 3 Code" }

    { 30  ;2   ;Field     ;
                SourceExpr="Shortcut Dimension 4 Code" }

    { 28  ;2   ;Field     ;
                SourceExpr="Shortcut Dimension 5 Code" }

    { 26  ;2   ;Field     ;
                SourceExpr="Shortcut Dimension 6 Code" }

    { 23  ;2   ;Field     ;
                SourceExpr="Shortcut Dimension 7 Code" }

    { 22  ;2   ;Field     ;
                SourceExpr="Shortcut Dimension 8 Code" }

    { 1904488501;1;Group  ;
                CaptionML=[ENU=Reporting;
                           ENG=Reporting] }

    { 12  ;2   ;Field     ;
                SourceExpr="Additional Reporting Currency";
                OnValidate=VAR
                             Confirmed@1001 : Boolean;
                           BEGIN
                             IF "Additional Reporting Currency" <> xRec."Additional Reporting Currency" THEN BEGIN
                               IF "Additional Reporting Currency" = '' THEN
                                 Confirmed := CONFIRM(Text002,FALSE)
                               ELSE
                                 Confirmed := CONFIRM(Text003,FALSE);
                               IF NOT Confirmed THEN
                                 ERROR('');
                             END;
                           END;
                            }

    { 16  ;2   ;Field     ;
                SourceExpr="VAT Exchange Rate Adjustment" }

    { 1904409301;1;Group  ;
                CaptionML=[ENU=Application;
                           ENG=Application] }

    { 65  ;2   ;Field     ;
                SourceExpr="Appln. Rounding Precision" }

    { 72  ;2   ;Field     ;
                SourceExpr="Pmt. Disc. Tolerance Warning" }

    { 51  ;2   ;Field     ;
                SourceExpr="Pmt. Disc. Tolerance Posting" }

    { 62  ;2   ;Field     ;
                SourceExpr="Payment Discount Grace Period";
                OnValidate=VAR
                             PaymentToleranceMgt@1000 : Codeunit 426;
                           BEGIN
                             IF CONFIRM(Text001,TRUE) THEN
                               PaymentToleranceMgt.CalcGracePeriodCVLedgEntry("Payment Discount Grace Period");
                           END;
                            }

    { 80  ;2   ;Field     ;
                SourceExpr="Payment Tolerance Warning" }

    { 70  ;2   ;Field     ;
                SourceExpr="Payment Tolerance Posting" }

    { 63  ;2   ;Field     ;
                SourceExpr="Payment Tolerance %" }

    { 64  ;2   ;Field     ;
                SourceExpr="Max. Payment Tolerance Amount" }

    { 1904993701;1;Group  ;
                CaptionML=[ENU=Reverse Charge;
                           ENG=Reverse Charge] }

    { 10410090;2;Field    ;
                SourceExpr="Threshold applies";
                OnValidate=BEGIN
                             IF "Threshold applies" THEN
                               ThresholdAmountEnable := TRUE
                             ELSE
                               ThresholdAmountEnable := FALSE;
                           END;
                            }

    { 10410092;2;Field    ;
                Name=ThresholdAmount;
                CaptionML=[ENU=Threshold Amount;
                           ENG=Threshold Amount];
                SourceExpr="Threshold Amount";
                Enabled=ThresholdAmountEnable }

    { 7   ;1   ;Group     ;
                CaptionML=[ENU=Payroll Transaction Import;
                           ENG=Payroll Transaction Import];
                Visible=FALSE;
                GroupType=Group }

    { 9   ;2   ;Field     ;
                SourceExpr="Payroll Trans. Import Format";
                Visible=FALSE }

    { 1901234601;1;Group  ;
                CaptionML=[ENU=Address Verification;
                           ENG=Address Verification];
                GroupType=Group }

    { 1000000000;2;Group  ;
                CaptionML=ENU=QAS;
                GroupType=Group }

    { 1040004;3;Field     ;
                SourceExpr="QAS Enabled";
                Enabled="Loqate Enabled"=FALSE }

    { 1040002;3;Field     ;
                SourceExpr="Web Service URL" }

    { 1040006;3;Field     ;
                SourceExpr="Suggest Names" }

    { 1000000001;2;Group  ;
                CaptionML=[ENU=Loqate;
                           ENG=Loqate];
                GroupType=Group }

    { 1000000002;3;Field  ;
                SourceExpr="Loqate Enabled";
                Enabled="QAS Enabled"=FALSE }

    { 1000000003;3;Field  ;
                SourceExpr="Loqate Service Key" }

    { 1900000007;0;Container;
                ContainerType=FactBoxArea }

    { 1900383207;1;Part   ;
                Visible=FALSE;
                PartType=System;
                SystemPartID=RecordLinks }

    { 1905767507;1;Part   ;
                Visible=FALSE;
                PartType=System;
                SystemPartID=Notes }

  }
  CODE
  {
    VAR
      Text001@1000 : TextConst 'ENU=Do you want to change all open entries for every customer and vendor that are not blocked;ENG=Do you want to change all open entries for every customer and vendor that are not blocked';
      ThresholdAmountEnable@19035618 : Boolean INDATASET;
      Text002@1002 : TextConst 'ENU=If you delete the additional reporting currency, future general ledger entries are posted in LCY only. Deleting the additional reporting currency does not affect already posted general ledger entries.\\Are you sure that you want to delete the additional reporting currency?;ENG=If you delete the additional reporting currency, future general ledger entries are posted in LCY only. Deleting the additional reporting currency does not affect already posted general ledger entries.\\Are you sure that you want to delete the additional reporting currency?';
      Text003@1001 : TextConst 'ENU=If you change the additional reporting currency, future general ledger entries are posted in the new reporting currency and in LCY. To enable the additional reporting currency, a batch job opens, and running the batch job recalculates already posted general ledger entries in the new additional reporting currency.\Entries will be deleted in the Analysis View if it is unblocked, and an update will be necessary.\\Are you sure that you want to change the additional reporting currency?;ENG=If you change the additional reporting currency, future general ledger entries are posted in the new reporting currency and in LCY. To enable the additional reporting currency, a batch job opens, and running the batch job recalculates already posted general ledger entries in the new additional reporting currency.\Entries will be deleted in the Analysis View if it is unblocked, and an update will be necessary.\\Are you sure that you want to change the additional reporting currency?';

    BEGIN
    {
      SDL1.000  A.Ireland QUK  QAS integration  20/03/2009
        Added new QAS tab and parameter fields for QAS integration.
      //DOC OP14491 DRM 15/11/2018 - Added field Loqate Enabled and created new group for Address Verification to include this and exsisting QAS fields.
    }
    END.
  }
}

OBJECT Page 50002 Loqate Address Response
{
  OBJECT-PROPERTIES
  {
    Date=23/11/18;
    Time=16:21:32;
    Modified=Yes;
    Version List=OP14491;
  }
  PROPERTIES
  {
    SourceTable=Table50002;
    SourceTableView=SORTING(Sort No.)
                    ORDER(Ascending);
    PageType=List;
  }
  CONTROLS
  {
    { 1000000000;0;Container;
                ContainerType=ContentArea }

    { 1000000001;1;Group  ;
                Name=Group;
                GroupType=Repeater }

    { 1000000002;2;Field  ;
                SourceExpr=Id;
                Visible=FALSE }

    { 1000000003;2;Field  ;
                SourceExpr=Type }

    { 1000000004;2;Field  ;
                SourceExpr=Text }

    { 1000000005;2;Field  ;
                SourceExpr=Highlight;
                Importance=Standard;
                Visible=FALSE }

    { 1000000006;2;Field  ;
                SourceExpr=Description }

  }
  CODE
  {

    BEGIN
    END.
  }
}

